ls命令
ls -l 显示更多信息
ls -h  人性化显示
例子：
ls -hl
-rw-r--r--@  1 zhaoxi  staff    90K  4 11 19:43 Django知识点.txt
drwxr-xr-x   3 zhaoxi  staff    96B  4 14 23:23 linux
lrwxr-xr-x  1 root   wheel    76B  1  1  2020 pythonw2.7 -> ../../System/Library/Frameworks/Python.framework/Versions/2.7/bin/pythonw2.7

zhaoxi是该文件的创建者，所有者
Staff是该文件的所属组
90k是文件的大小
4 11 19:43是文件的修改时间或者查看时间或者创建时间
最后是文件名

-rw-r--r--
drwxr-xr-x
lrwxr-xr-x
10个字符。第一个 - 表示是一个文件，d表示是一个目录，l开头(link)是软连接
后面9个每三个是一组。例如：rw-  r--  r-- 第一组rw-是u所有者的权限。第二组是g所属组的权限。第三组是o其他人的权限。 r代表读权限，w代表写权限，x代表执行权限


ls -d  显示当前目录的信息，而不显示目录下的文件的信息。一般-ld一起使用
ls -i  显示每一个文件的唯一标志



--------------------------------------
mkdir  目录名    可跟多个目录，创建多个
mkdir -p   目录名   可递归创建


rmdir 目录名    删除目录，删除空目录


cp  原文件  目标目录           复制文件。可复制多个，复制的同时可改名
cp -rp  原目录  目标目录       复制目录。 -r复制目录 -p保留文件属性



mv 剪切和更名

rm   删除文件或目录
rm  -rf  文件或目录   -r删除目录    -f强制删除



touch  创建一个文件


Cat 显示文件内容    -n 显示行号

Tac  显示文件内容(倒着显示) 


More  分页显示文件内容   回车换行，q退出，f(或者空格)翻页 

less 与more类似，只不过还可以向上翻页。还可以搜索，用 /，然后n 表示下一个


Head  只看一个文件的前几行    head -n  7  文件名   前七行。 不加-n指定行时默认10行

Tail 与head对应。 查看末尾几行





ln  
ln -s 原文件   目标文件   创建软连接，生成链接文件
ln  原文件   目标文件     硬链接
软连接与硬链接是什么，有什么区别和特征。
硬链接： 相当于cp -p + 同步更新 。 与原文件的i节点相同。不能跨分区。不能对目录使用





-----------------------------------

权限管理命令
只有两个人可以更改权限，一个是root，一个是所有者

chmod [{ugoa}{+-=}{rwx}][文件或目录][mode=421][文件或目录]
Ugoa表示： u是所有者，g是所属组， o是其他人 ， a表示所有人
+-= 表示 ：  + 表示加权限  -表示减去权限   = 表示不管之前是什么权限，现在让其等于这个权限
rwx  表示：  r读权限， w写权限  x执行权限

例如：  chmod u+x 文件名

权限的数字表示：
r ==== 	4
w  ==== 2
x  ===== 1
Rwxrw-r--  7  6  4
使用数字赋权限 。 例如 ： 给文件赋予 rw-r-----权限 chmod  640  文件名  


Chmod -R  递归修改   给一个目录赋予某个权限，则该目录下的所有文件及目录的权限均变化


R   读权限     对文件来说，可以查看文件的内容(cat/more/less/head/tail)    对目录来说，可以列出目录中的内容(ls)
W   写权限      对文件来说，可以修改文件的内容(vim)   对目录来说， 可以在目录中创建，删除文件(touch/mkdir/rmdir/rm)
x   执行权限    对文件来说，可以执行文件()         对目录来说，  可以进入目录(cd)


注意：删除一个文件的前提不是对该文件有写权限，而是对该文件所在的目录有写权限



---------------------

chown 
改变文件或目录的所有者
Chown [用户][文件或目录]

只有root可以改变所有者


Chgrp 
改变文件或者目录的所属组，与chown类似




一个文件的所有者和所属组是哪来的？
谁创建了这个文件，谁就是文件的所有者。
所属组是这个文件的创建者的缺省组(缺省组是什么？。。。)




Umask 显示，设置文件的缺省权限(默认权限)
Umask -S   以rwx的形式显示新建文件缺省权限。  例如：mkdir 建一个目录，其权限与umask -S一致。而touch则没有x权限
因为Linux系统中，新建一个文件，默认是没有x可执行权限的。

不加-S时，会显示一个数字串
例如：022 表示 --- -w- -w-。
然后022   --- -w- -w-会与     777  rwx rwx rwx 进行与操作，然后两个位置都有的权限则会去掉。
--- -w- -w-
rwx rwx rwx
----------------
Rwx r-x r-x 目录
rw- r-- r-- 文件
计算后的权限就是创建文件时的默认权限





--------------------------------------------
文件搜索命令
find

Find [搜索范围][匹配条件]
find / -name a.txt   根据文件名搜索  -name。精准搜索出文件名等于a.txt的
Find / -name  *a*    通过通配符*指定名字。只要文件名中包含该字符就行
find / -name  a???   ？匹配单个字符,所以该句是匹配以a开头，后面跟着三个字符的文件名

-name区分大小写
-iname不区分大小写


-size 根据文件大小搜索
+n 大于n
-n  小于n
n   等于n

-user 根据用户(所有者)查找
-group 根据所属组查找


-cmin  根据某段时间文件属性被改变过的
-amin  根据某段时间访问时间被改变过的
-mmin  根据某段时间文件内容被改变过的

例如： find / -cmin -5  查找5分钟内文件属性被改过的文件。 （+ = -）


-a 表示and
-o 表示两个条件满足一个即可

例如：find /etc -size +163840 -a -size -204800 查找文件大小在该范围的文件


-type 根据类型查找 f表示文件 d表示目录 l表示软连接文件


-exec或者-ok  表示对查找到的结果进行一个操作
例如：find / -name a.txt -exec ls -l {} \;    {} \; 固定写就行


-inum  根据i节点(ls -i)进行查找


.表示当前目录







Locate命令  速度很快
Locate 文件名	
Locate是从资料库查找的，速度很快
updatedb 更新资料库
要找的文件在tmp下时，locate找不到
locate -i 不区分大小写







which
查找命令所在的路径及是否有别名

whereis
也可查找命令所在的路径，还可找到该命令的帮助文档的路径




grep 
在文件内容中查找，返回该内容所在文件的这一行
Grep  要查找的内容   要查找的文件
Grep -i  不区分大小写
     -v  排除指定字符




------------------------------------
man  获取命令或者配置文件的帮助信息 (与more的操作类似)
例如：man ls. 





--help 获取命令的帮助，基本每个命令都有该选项


info 与man类似



help 查看shell内置命令的帮助信息.shell内置命令用man不能查看

date 查看日期或者修改日期





-------------------------------------
基本的用户管理命令

useradd    添加新用户。 例如 ：useradd zhaoxi

Passwd     设置用户密码  例如： passwd zhaoxi 



who   查看登录用户信息
zhaoxi   console  Apr 13 10:39 
zhaoxi   ttys011  Apr 17 23:53
登录用户名   登录终端(tty表示本地终端,pts是远程终端)   登录时间


w   查看登录用户的详细信息






---------------------------
压缩解压命令
gzip  
压缩为gz文件   gunzip 解压缩    
只能压缩文件，不能压缩目录。而且压缩完不保存原文件



tar
打包目录
tar [-zcf][压缩后文件名][目录]
-c  打包  -v显示详细信息   -f 指定文件名  -z打包同时压缩
压缩后格式为 .tar.gz

解压缩
-x  解包
-v  显示详细信息
-f  指定解压文件
-z  解压缩



zip
压缩文件和目录
zip[-r][压缩后文件名][文件或目录]
-r 压缩目录
压缩后为.zip


解压缩
unzip[压缩文件] 






bzip2
压缩后格式.bz2
bzip2 [-k][文件]
-k 产生压缩文件后保留原文件

解压
bunzip2
-k 保留压缩包







--------------------------------
网络命令
write
write  用户名   给用户发信息。 例如：write zhaoxi
只能给登录用户发



wall
给所有在线用户发广播信息
wall [message]





ping 
测试网络连通性
ping  选项  ip地址
      -c   指定发送次数




ifconfig
查看和设置网卡信息
查看：ifconfig
设置：ifconfig 网卡名称  IP地址
例如：ifconfig eth0 192.168.8.250




mail
查看发送电子邮件
mail [用户名]   发送
Ctrl+d 保存发送

mail 查看





last命令
统计计算机所有用户的登录的信息


lastlog命令
显示最后一次登录的信息
lastlog -u 用户的uid   只看这一个用户



traceroute
探测数据包到达网站的主机路径
例如：traceroute www.sina.com.cn



netstat
显示网络相关信息
netstat [选项]
-t    tcp协议
-u    udp协议
-l    监听
-r     路由
-n     显示ip地址和端口号

netstat -tlun   查看监听的tcp，ip协议的ip和端口
netstat -an      查看所有的信息
netstat -rn      查看本机路由表





setup命令 redhat系列专有的
配置网络




mount  挂载(将设备连接在挂载点上，windows平时插上优盘直接自动挂载，但是linux需要手动挂载)
mount [-t 文件系统] 设备文件名 挂载点
例如：mount -t iso9660  /dev/sr0 /mnt/cdrom


umount  卸载挂载




---------------------------
关机重启命令


shutdown  [选项] 时间
-h  关机
-r  重启
-c  取消前一个关机命令
 
shutdown -h now 现在
shutdown -h 20:30  晚上8点

shutdown关机时，会正确保存数据后在关机






halt   关机
Poweroff  关机 ，相当于直接断电
init 0    关机


reboot 重启
init 6 重启




推荐用shutdown



runlevel  查询当前的运行级别(0,1,2,3,4,5,6)



-----------------------------------

Vim  文本编辑器

vim filename 进入命令模式
输入i，a，o  进入插入模式。按esc键回到命令模式

在命令模式进入编辑模式。输入：(冒号)
在编辑模式输入完命令，回车后自动又进入命令模式

插入命令
a   在光标所在字符后插入
A   在光标所在行尾插入
i   在光标所在字符前插入
I   在光标所在行行首插入
o   在光标下插入新行
O   在光标上插入新行



定位命令
:set number(nu) 设置行号
:set nonu  取消行号
gg  到第一行
G   到最后一行
nG  到第n行
:n   到第n行

$  移至行尾
0  移至行首



删除命令

x  删除光标所在处字符
nx  删除光标所在处后n个字符
dd  删除光标所在行，ndd删除n行
dG  删除光标所在行到文件末尾内容
D   删除光标所在处到行尾内容 
:n1,n2d   删除指定范围的行




复制，剪切命令
yy  复制当前行
nyy   复制当前行以下n行
dd    剪切当前行
ndd   剪切当前行以下n行
p、P   粘贴在当前光标所在行下或行上

替换、取消命令
r 取代光标所在处字符
R   从光标所在处开始替换字符，按esc结束
u    取消上一步操作


搜索和搜索替换
/string  搜索指定字符串   忽略大小写 :set ic
n        搜索指定字符串的下一个出现位置
:%s/old/new/g      全文替换指定字符串
:n1,n2s/old/new/g   在一定范围内替换指定字符串


保存退出命令
:w   保存修改
:w new_filename 另存为指定文件
:wq  保存修改并退出
ZZ  快捷键，保存修改并退出
:q!  不保存修改退出
:wq!   保存修改并退出(文件所有者及root可使用)


导入命令
:r !命令
:r !date 将当前命令的执行结果导入当前文件，光标所在行为导入位置


定义快捷键：map  快捷键  触发命令


连续行注释  
:n1,n2s/^/#/g       ^表示行首，在行首加一个#号
:n1,n2s/^#//g        将#替换为空
:n1,n2s/^/\/\//g      转义符


替换 (实时替换，插入的时候)
:ab zhaoxi zx  将zhaoxi替换为zx











------------------------------------------
软件包管理


软件包分类：
1、源码包(一般是c,c++写的) ，脚本安装包

2、二进制包(rpm包，系统默认包)(经过编译之后的，Windows编译完是exe格式，centos是rpm格式)




Rpm包管理------rpm命令管理

Rpm包依赖性，可能装一个包要装别的依赖包

Rpm包命名规则：软件包名+软件版本+。。+适合的linux平台+适合的硬件平台+扩展名

www.rpmfind.net  在这个网站可以搜索 .so.0模块是哪个包的

安装：rpm -ivh 包全名
-i   安装
-v 显示详细信息
-h  显示进度
--nodeps  不检测依赖性
-U   升级


卸载：rpm -e 包名
-e 卸载


Rpm包的查询
Rpm -q 包名  查询包是否安装
-q   查询

Rpm -qa   查询所有已安装包


Rpm -qi 包名   查询软件包的详细信息
-i   查询软件信息
-p   查询未安装包信息


Rpm -ql 包名  查询包中文件安装位置

-l  列表
-p   查询未安装包信息


Rpm -qf 系统文件名    查询系统文件属于哪个rpm包
-f  查询系统文件属于哪个rpm包


Rpm -qR 包名   查询软件包的依赖性
-R  查询软件包的依赖性
-p  查询未安装包信息











Rpm包管理------yum在线管理
自动下载依赖



/etc/yum.repos.d/Centos-Base.repo


yum命令

Yum list 查询所有可用软件包

Yum search 关键字    搜索服务器上和关键字相关的包



yum -y install 包名   安装
-y 自动回答yes


Yum -y upgrade 包名  升级  ，不加包名时，会升级所有包，包括linux内核

yum -y remove 包名   卸载


yum grouplist    列出可用的软件组列表

yum groupinstall 软件组名    安装指定软件组

yum groupremove  组名     卸载软件组





源码包安装
安装c编译器
下载源码包

./configure  配置与检查
make          编译
make install   编译安装



脚本安装包










------------------------------------------
用户和用户组管理


--------------
用户配置文件
/etc/passwd    用户信息文件
/etc/shadow    影子文件
/etc/group     组信息文件
/etc/gshadow    组密码文件


---------------
用户管理的相关文件
1、用户的'家'目录： root用户在/root下，普通用户在/home/用户名
2、用户的邮箱目录   /var/spool/mail/用户名/
3、用户的模板目录     /etc/skel


------------------
用户管理命令
useradd  用户添加
Passwd   修改用户密码
Usermod   修改用户信息
Chage     修改用户密码状态
userdel    删除用户
id 用户名   查看用户id信息

su [选项]  用户名     用户切换 
su - 用户名    只使用 - 代表连带用户的环境变量一起切换
-c   仅执行一次命令，而不切换用户身份


-------------
用户组管理命令
groupadd   增加
groupmod   修改
groupdel   删除










----------------------------------------------------
权限管理


ACL权限



文件特殊权限
SetUID
SetGID
Sticky BIT



文件系统属性chattr权限
chattr  [+-=][选项] 文件或目录名 
选项：i，a


lsattr  选项  文件名     查看文件系统属性





系统命令sudo权限

sudo的操作对象是系统命令
把本来只能root执行的命令赋予普通用户执行


visudo命令 实际上是/etc/sudoers文件

以sudo开头，然后执行命令







----------------------------------------------------------
文件系统管理


分区与系统管理


文件系统常用命令
df  [选项][挂载点]   查看文件系统的使用情况
du      统计目录的大小
fsck
dumpe2fs     显示磁盘状态命令

挂载命令
mount
Mount -l   查询系统中已挂载的设备




fdisk分区
/etc/fstab文件修复
分配swap分区











------------------------------------------------------------------------------
shell编程
/etc/shells，该目录包含了机器上支持的shell解释器

------------
shell基础


输出命令   echo
Echo [选项][输出内容]
输出字符串有空格时加引号。(注意单引号与双引号的区别)
-e  支持反斜线控制的字符转换


Shell脚本可以直接调用系统命令
Shell脚本以 #!/bin/Bash 开头，其余#开头的都是注释

脚本执行
1、赋予执行权限，直接执行
chmod 755 hello.sh
./hello.sh    系统中所有的执行脚本,二进制文件都是通过完整路径或者./相对路径执行
2、通过bash调用执行脚本
bash hello.sh



历史命令：
history [选项][历史命令保存文件]   可以查看之前使用过的历史命令
-c  清空历史命令
-w   把缓存中的历史命令写入历史命令保存文件(~/.bash_history)


上下箭头调用之前执行过的命令
!n    重复执行第n条命令
!!    重复执行上一条命令
!字串  重复执行最后一条以该字串开头的命令



Tab键补全




命令别名
alias 别名='原命令'    设定命令别名
alias  查询命令别名

在命令行中使用别名只是临时生效，
若想永久生效，则写入~/.bashrc



命令执行顺序
1、第一顺位执行用绝对路径或相对路径执行的命令
2、第二顺位执行别名
3、第三顺位执行bash的内部命令
4、第四顺位执行按照$PATH环境变量定义的目录查找顺序找到的第一个命令




删除别名
unalias  别名





bash快捷键
ctrl+a   将光标移到命令行开头
ctrl+e   将光标移到命令行末尾
ctrl+c   强制终止当前的命令
ctrl+l   清屏，相当于clear
ctrl+u   删除或剪切光标之前的命令，
ctrl+k   删除或剪切光标之后的内容
ctrl+y   粘贴ctrl+k或u剪切的内容
ctrl+r   在历史命令中搜索
ctrl+d   退出当前终端
ctrl+z   暂停，并放入后台
ctrl+s    暂停屏幕输出
ctrl+q    回复屏幕输出




输入输出重定向

输出重定向

命令 > 文件       覆盖
命令  >> 文件     追加

lsl  2>> 文件    错误命令追加，将错误信息写入文件

命令  >>  文件 2>&1    不管错误还是正确，都保存
命令  &>>  文件     与上面一条类似，写法更简单

命令  >> 文件1 2>>文件2  将正确输出与错误输出分别保存在文件1和文件2中



输入重定向

wc [选项][文件名]
-c  统计字节数
-w  统计单词书
-l  统计行数

wc  < 文件名

输入重定向用的不多







多命令顺序执行
;      命令1;命令2;。。。。   多个命令顺序执行，命令之间没有任何逻辑关系
&&     命令1&&命令2&&。。。。  逻辑与，当命令1正确执行，则命令2才会执行，命令1执行不正确，则2不会执行
||     命令1||命令2||。。。    逻辑或，当命令1执行不正确，则命令2才会执行，当1正确执行，则2不会执行
 




dd if=输入文件 of=输出文件 bs=字节数 count=个数   (用来磁盘复制)

if 指定源文件或源设备
Of  指定目标文件或目标设备
Bs   指定一次输入/输出多少字节，把这些字节看做一个数据块
Count 指定输入/输出多少个数据块







管道符
命令1 | 命令2   命令1的正确输出作为命令2的操作对象
例如：
ls -a /etc/ | more

grep [选项] ”搜索内容“  文件名   在文件中搜索
-v   反向查找
-i   忽略大小写
-n   输出行号
--color=auto  搜索出的关键字用颜色显示

Netstat -an | grep LISTEN






通配符
?     匹配任意一个字符
*     匹配零个或多个字符      
[]    匹配括号中的一个字符     [abc]
[-]   匹配括号中范围的一个字符   [a-z]
[^]  [^0-9]匹配不是数字的一个字符，取非




Bash中其他特殊符号
‘’    单引号，在单引号中的所有特殊符号，都没有特殊含义
”“    双引号，在双引号中的特殊符号都没有特殊含义，但是"$"、"\"、”`“例外。拥有调用变量的值，转义符，引用命令的含义
``    反引号，反引号括起来的内容是系统命令。bash中会先执行他。和$()作用一样。
$()   用来引用系统命令
#     在shell脚本中，表示注释
$     用于调用变量的值，如需调用变量name的值时，用$name的方式获取
\     转义符



----------------
bash的变量
变量由字母，数字和下划线组成，不能以数字开头。
Bash中，变量默认类型是字符串
变量用等号连接值，等号左右两边不能有空格
当变量的值有空格，将变量的值用引号括起来
环境变量名建议大写，便于区分

--------------
用户自定义变量

变量定义：
name=zx
name="zx a"

变量叠加 ： 
a=123
a=${a}45
Echo a   --->  12345

变量调用
$name

变量查看
Set    查看系统中所有变量

变量删除
unset 变量名



------------
环境变量
主要是和系统操作环境相关的数据,一部分是系统固定的，一部分是可添加的

用户自定义变量也叫本地变量，只在当前的shell中生效。而环境变量会在当前shell和
这个shell的所有子shell中生效。如果把环境变量写入相应的配置文件，那么这个环境
变量会在所有的shell中生效


设置环境变量
Export 变量名=变量值
将本地变量声明为环境变量：export 变量名


查询环境变量
env


删除变量
unset 变量名



PATH变量
用:分隔的，系统查找命令的路径
添加路径时，用变量叠加的方法添加。(用:分隔)


PS1变量
定义系统提示符的变量(定义 [root@localhost /]#   显示的内容)






------------
位置参数变量
变量名不能自定义，变量作用是固定的，只能改值
$n  n为数字。$0表示命令本身，$1-$9表示第一到第九个参数，十以上用大括号包含。如：${10}
$*  把所有参数看成一个整体。长度为1
$@  把所有参数一个一个的得到。 长度为参数的个数
$#  参数的个数







预定义变量
变量名不能自定义，变量作用是固定的，只能改值

$?    最后一次执行的命令的返回状态。如果为0，则上个命令正确执行。如果不为0，则上个命令执行不正确
$$    当前进程的进程号(pid)
$!    后台运行的最后一个进程的进程号



----------
接收键盘输入
read [选项][变量名]
-p “提示信息”   在read等待输入时，输出提示信息
-t 秒数        指定等待时间。不指定时会一直等
-n 字符数      接收指定的字符数，就会执行
-s            隐藏输入的数据，适用于机密信息的输入






-----------
Bash的运算



declare 
声明变量类型
declare[+/-][选项] 变量名
-       给变量设定类型属性
+       取消变量的类型属性
-i      将变量声明为整数型
-x      将变量声明为环境变量
-p      显示指定变量的被声明的类型



运算举例：
a=11
b=22
直接加是字符串相加


运算方式1
declare -i c=$a+$b

方式2。用expr或let。两个用法一样
dd=$(expr $a + $b) 加号两侧必须有空格

方式3(推荐使用) $((运算式)) 或者  $[运算式]
ff=$(($a+$b))
gg=$[$a+$b]



-------
运算符
基本都支持








--------
变量测试与内容替换





--------
环境变量配置文件

Source命令，让配置文件直接生效

source 配置文件
或
. 配置文件


/etc/profile
/etc/profile.d/*.sh
~/.bash_profile
~/.bashrc
/etc/bashrc

/etc/下的几个文件会对所有用户都生效
家目录下的几个只对某个用户生效


环境变量配置文件调用顺序

输入用户名密码登录后:
/etc/profile
调用
/etc/profile.d/*.sh
~/.bash_profile
调用
~/.bashrc
调用
/etc/bashrc





Shell登录后的欢迎信息
/etc/issue   本地登录
/etc/issue.net    远程登录
/etc/motd        本地远程都生效






-------------------------------
shell编程


1、正则表达式
正则表达式是匹配文件中的字符串。grep，awk，sed等命令可支持正则
通配符是匹配文件名。ls，find，cp等命令不支持正则。




2、字符截取命令

cut命令
Cut [选项]  文件名
-f  列号   提取第几列
-d  分隔符  按照指定分隔符分割列

有空格且排列不规范时，用cut就不行了




prinf命令
格式化打印输出命令
printf  '输出类型输出格式' 输出内容
输出类型： 
%ns    输出字符串。n是数字，指代输出几个字符
%ni    输出整数。n是数字，指代输出几个字符
%m.nf  输出浮点数。m和n是数字，指代输出几位数和小数位数。例如%8.2f表示小数两位，整数六位
输出格式:
\a   输出警告声音
\b   输出退格键，也就是backspace键
\f   清屏
\n   换行
\r   回车，enter键
\t   水平输出退格键，tab键
\v   垂直输出退格键，tab键



awk命令(较复杂)。
比cut更强。但是较复杂

awk ‘条件1 {动作1} 条件2 {动作2} ....’ 文件名

条件：（可以不加条件）
<
>
>=
<=
等

动作：
格式化输出
流程控制语句


例子：
df -h | grep disk1s1s1 | awk '{print $5}' | cut -d '%' -f 1



BEGIN 
END
FS 内置变量  指定分隔符




sed命令
Sed是轻量级流编辑器。主要用来将数据进行选取，替换，删除，新增的命令

Sed [选项] '[动作]' 文件名  (动作由单引号括起来)
选项:
-n   一般sed命令会把所有数据都输出到屏幕，如果加-n则只会把经过sed命令处理的行输出到屏幕
-e   允许对输入数据应用多条sed命令编辑
-i   用sed的修改结果直接修改读取数据的文件，而不是由屏幕展示

动作:
a\    追加，在当前行后添加一行或多行。添加多行时，除最后一行外，每行末尾需要用“\”代表数据未完结
c\    行替换。用c后面的字符串替换原数据行，替换多行时，除最后一行外，每行末尾需用“\” 代表数据未完结
i\    插入，在当前行前插入一行或多行。插入多行时，除最后一行外，每行末尾需要用‘\’代表数据未完结
d     删除，删除指定的行。
p     打印，输出指定的行
s     字串替换，用一个字符串替换另外一个字符串。格式为"行范围s/旧字串/新字串/g"。不加行范围就是整篇文档





3、字符处理命令
Sort命令  排序
Sort [选项] 文件名
选项
-f    忽略大小写
-n    以数值型进行排序，默认使用字符串型排序
-r    反向排序
-t    指定分隔符，默认是制表符
-k n[,m]   按照指定的字段范围排序。从第n字段开始，m字段结束(默认到行尾)

Wc命令（统计命令）
wc [选项] 文件名
-l  只统计行数
-w  只统计单词数
-m  只统计字符数




4、条件判断
-b
-c
-d
-f
-e     判断该文件是否存在
-L
-p
-s
-S
两中判断格式：
1、test -e hello.txt   判断该文件是否存在
2、[ -e hello.txt ]   括号内前后必须有空格。判断该文件是否存在
然后用 echo $? 查看判断结果 或者 [ -e sql.txt ] && echo "yes" || echo "no" 查看结果



-r   判断文件是否有读权限
-w   写
-x   执行



文件1  -nt  文件2    判断文件1是否比2的修改时间新
文件1  -ot  文件2    判断文件1是否比2的修改时间旧
文件1  -ef  文件2    判断文件1和2的inode的号是否相同




整数之间的比较。
-eq   相等
-ne   不等
-gt   大于
-lt   小于
-ge   
-le   



字符串判断
-z 字符串
-n 字符串
字符串1==字符串2
字符串1!=字符串2



多重判断
判断1 -a 判断2   
判断1 -o 判断2
！判断条件








5、流程控制-----if语句

单分支if条件语句
If [ 条件判断式 ]; then
	程序
fi
或者
If [ 条件判断式 ]
 then 
    程序
fi

If开头，fi结尾
条件判断式的括号内前后必须有空格
Then如果跟[]在一行就加;分割，如果单独一行，就不用加;了


双分支
if [ 条件判断 ]
 then
    程序
 else
    程序
fi


多分支
if []
 Then
   程序
elif []
 Then 
   程序
....

Else
 程序

fi




case语句

case $变量名 in
  “值1”)
      程序
      ;;
   "值2"）
      程序
      ;;
   ...省略...
   *)
      程序
      ;;
esac





for循环

1、for 变量 in 值1 值2 值3....（用空格/换行等 隔开）
  do
    程序
  done


2、for((初始值;循环控制变量;变化条件))
     do
       程序
     done






while循环与until循环

While [ 条件判断式 ]
 do
   程序
 done


Until  [ 条件判断式 ]   (until与while相反，当条件不成立一直循环，直至成立)
 do
   程序
 done








------------------------------------------------------
服务管理(以下内容应该是在centos6版本使用，centos7可能会有不同)
一些软件装完是应用软件，一些软件装完是服务软件

Linux服务(与windows一样)：rpm包安装、源码包安装


chkconfig --list  查看rpm包安装的服务状态

源码包安装的服务一般在/usr/local下


Rpm包安装的目录(以下目录好像是centos6版本的)
/etc/init.d   启动脚本位置
/etc/sysconfig   初始化环境配置文件位置
/etc/           配置文件位置
/etc/xinetd.conf   xinetd配置文件
/etc/xinetd.d      基于xinetd服务的启动脚本
/var/lib/          服务产生的数据放在这里
/var/log         日志



独立服务的启动
/etc/init.d/独立服务名   start|restart|stop|status

Service 独立服务名  start|restart|stop||status


自启动

1、chkconfig [--level 运行级别][独立服务名][on|off]

2、修改/etc/rc.d/rc.local文件

3、ntsysv命令






--------------------------------
进程管理

判断服务器健康状态




查看系统中所有进程
Ps

Ps aux     查看系统中所有进程，使用BSD操作系统格式
a 查看所有前台进程
x 查看所有后台进程
U 显示进程是由哪个用户产生的


Ps -le     查看系统中所有进程，使用linux标准命令格式
-l 显示更详细的信息
-e  显示所有进程



tty表示进程的登录终端
？是内核产生
Tty1-tty7 代表本地控制台终端
Tty1-tty6是本地的字符界面终端，tty7是图形界面。
Pts/0-255代表虚拟终端(远程登录终端)



STAT  进程状态
R 运行 
S  睡眠
T  停止状态
s   包含子进程
+   位于后台

TIME  表示进程占用cpu的运算时间






Top命令
-d 秒数  多少秒更新一次，默认是3秒


显示信息
%id  cpu空闲百分比


Top交互模式
？或h可以显示帮助
P   以cpu使用率排序，默认就是此项
M   内存的使用率排序
N    以pid排序
q    退出top




pstree命令








杀死进程
kill


kill -l  查看可用的进程信号

信号
1   SIGHUP   让进程立即关闭，然后重新读取配置文件之后重启
2   SIGINT   程序终止信号，用于终止前台进程。相当于ctrl+c
8   SIGFPE   
9   SIGKILL  立即结束程序的运行，本信号不能被阻塞，处理和忽略。一般用于强制终止进程
14  SIGALRM  时钟定时信号，
15  SIGTERM  正常结束进程的信号，kill命令的默认信号。
18  SIGCONT  让暂停的进程恢复执行，本信号不能被阻塞
19  SIGSTOP  该信号可以暂停前台进程，相当于ctrl+z。不能被阻塞


kill [-信号]  pid

kill -9 pid   强制杀死
Kill -1 pid   重启  



Killall [选项][信号] 进程名字
选项
-i   交互式，询问是否要杀死某个进程
-I   忽略进程名的大小写




pkill命令
与killall类似


pkill [选项][信号] 进程名字

-t 终端号   将该登录的用户终端踢出去
















-------------------------------------------
工作管理

把进程放入后台

例如：
tar -zcf etc.tar.gz /etc &    后面加一个&符号。放入后台还在执行
top 执行时 ，按ctrl+z    放入后台不执行了


查看后台的工作
jobs [-l]

-l  显示工作的pid



将暂停的工作恢复到前台
fg %工作号
%可以省略。(注意工作号不是pid)


bg  恢复到后台工作
bg %工作号






---------------------------
系统资源查看


Vmstat命令    监控系统资源
Vmstat [刷新延时 刷新次数]



dmesg
查看开机时内核检测的信息



free
查看内存使用状态
free [-b|-k|-m|-g]


缓存 cache
缓冲 buffer  往硬盘上写数据时，不是直接写入硬盘，而是先放入缓冲区
都是内存




Cpu信息  /proc/cpuinfo


uptime    系统的启动时间和平均负载，top命令的第一行.w也能看



uname [选项]
-a  查看系统所有信息
-r  内核版本
-s  内核名称




判断当前系统的位数
file /bin/ls



查看当前linux系统的发行版本
lsb_release -a 




列出进程调用的文件
lsof [选项]

-c 字符串
-u 用户名
-p pid






--------------------------------
系统的定时任务


crond服务
启动： service crond restart


crontab [选项]
-e   编辑crontab定时任务
-l   查询crontab任务
-r   删除当前用户的所有crontab任务



编写格式
* * * * *
第一个 *   一个小时的第几分钟 0-59
第二个     一天的第几个小时 0-23
第三个      一个月当中的第几天  1-31
第四个     一年当中的第几个月   1-12
第五个     一周当中的星期几    0-7











---------------------------------
日志管理


syslogd服务(默认linux启动着)
rsyslogd服务是syslogd服务的升级版


/var/log目录下











----------------------
启动管理

系统运行级别
0  关机
1  单用户模式
2  不完全的命令行模式，不含nfs服务
3  完全的命令行模式，就是标准字符界面
4  系统保留
5  图形模式
6  重启动



runlevel   查看运行级别

init  运行级别    改变运行级别命令

/etc/inittab  文件可修改





系统启动流程




启动引导程序grub







备份与恢复
Dump   命令
Restore 命令






















