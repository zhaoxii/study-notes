css语法：
写在head标签内，style标签内。
选择器 { 样式 }

选择器是用于指定CSS样式的 HTML标签，花括号内是对该对象设置的具体样式
属性与属性值之间用键值对的形式
多个键值对之间用分号分隔



css代码规范
1、一行写一个样式
例如：
p {
    color: red;
    font-size: 222px;
}
2、小写字母书写
3、color: red;  冒号后面，red前面加一个空格。 p 和大括号中间加一个空格。



----------------------------------------------------------------------------
css选择器
选择器就是根据不同的需求，把不同的标签选出来。
简单来说，就是选择标签的。

选择器分类
基础选择器，复合选择器
基础选择器是单个选择器组成的。包括标签选择器，类选择器，id选择器，通配符选择器。

class选择器/类选择器。 点加类名。不要用纯数字，中文。
.类名{
}
可以给一个标签指定多个类名，达到更多选择的目的。这些类名都可以选出这个标签。
多个类名用空格隔开。
例：class="a b c"
可以节省代码。将公共的样式提取出来。


id选择器根据id属性选择,最好使其id具有唯一。#加id名
#id名{
}


类选择器与id选择器的区别：
类选择器好比人的名字，一个人可以有多个名字，同一个名字也可以多个人用。
id选择器好比人的身份证号码。全中国唯一。不能重复
类选择器在修改样式中使用最多，id选择器一般用于页面唯一性的元素上，经常与js搭配使用。



通配符选择器，匹配页面中所有的标签。
*{
}


标签选择器是选择所有指定的标签。
类选择器是选择指定 class名 的标签。
id选择器是选择指定id名的标签。




----------------------------------------------------------------------------
字体属性

font-family  设置字体

例：font-family: "Microsoft YaHei", Arial, Helvetica, sans-serif;

多个字体用逗号间隔。
如果一个字体名中有空格，可以用引号包裹。
设置多个字体时，第一个如果电脑上有安装，就按第一个，后面的依次类推。


font-size  字体大小
px单位是像素
谷歌浏览器默认是16，不同浏览器不同
直接给body指定时，标题标签(h1-h6)需要单独设置

font-weight 字体粗细
例：
font-weight: bold; 加粗。 默认是normal，相当于数字的400。
font-weight: 700;  (100-900)

font-style 字体样式
用来设置斜体。
font-style: italic;
平时很少让字体倾斜，反而是让倾斜的字体不倾斜(对em标签)
em {
	font-style: normal;
}


字体复合属性
可以将文字样式综合来写。节省代码
按该格式写：font: font-style font-weight font-size/line-height font-family;
font: italic 700 16px/25px "Microsoft YaHei"
不能颠倒顺序。空格隔开。不需要设置的属性可以省略(取默认值)，但必须保留
font-size和font-family属性，否则font属性不起作用。


-------------------
文本属性
文本的外观样式。(颜色、对齐文本，文本缩进，行间距等)


color  文本颜色。有下面几种写法
1、英文
2、十六进制(#ff0000)
3、rgb(255,0,0)
实际开发常用十六进制。



text-align 
设置元素内文本内容的水平对齐方式。

text-align: center/left/right;  居中，左对齐(默认)，右对齐



text-decoration
规定添加到文本的修饰。可以给文本添加下划线，删除线，上划线等。
text-decoration: none(默认，没有装饰线)
text-decoration: underline(下划线)
text-decoration: overline(上划线，几乎不用)
text-decoration: line-through(删除线，不常用)
a标签链接自带下划线。可以用该样式去掉


text-indent
指定文本的第一行的缩进，通常将段落的首行缩进。
text-indent: 20px/-20px。可以为负值，但不常用。
text-indent: 2em。   缩进当前元素两个文字大小的距离。
em是相对单位，就是当前元素(font-size)1个文字的大小。如果当前元素
没有设置大小，则会按照父元素的1个文字大小。



line-height(行间距)
设置行间的距离(行高)。控制行与行之间的距离。
line-height: 26px;
包括文字本身的高度和上间隙和下间隙。



-----------------
css的引入方式

按照css样式书写的位置不同，可以分为三类：
1、行内样式表。
2、内部样式表。
3、外部样式表。

内部样式表是写在html页面内部，将所有的css代码抽取出来，单独放在一个style标签中。
例：
<style>
	div {
		color: "red";
	}
</style>
style标签理论上可以放在html文档的任何地方。但一般会放在文档的head标签中。


行内样式表是在标签内部的style属性中设定的。适合简单的样式修改。没有实现结构样式相分离。
不推荐使用。


外部样式表是把样式单独写在css文件中，之后把css文件引入到html页面中。
最多使用。
使用link标签引入。
<link rel="stylesheet" href="css路径">




-----------------------------------------
chrome调试工具

F12
可查看html和css代码。排查错误。

-----------------------------------------
emmet语法

使用缩写，提高html/css的编写速度。vscode已集成该语法。

生成html
1、生成标签直接输入标签名加tab键即可。
2、想要生成多个相同标签，加上 * 就可以了，例如：div*3就可以快速生成3个div
3、如果有父子关系的标签，可以用 >  例如：ul > li
4、如果有兄弟关系的标签，用+就可以了。例如：div+p
5、如果生成带有类名或者id名的，直接写.demo 或者 #two tab键就可以了(默认是div)。如果要用别的标签，则例如：p.two，p#two
6、如果生成的div类名是有顺序的，可以用自增符号 $。例如：.demo$*5，p.demo$*5
7、生成的标签内默认显示几个文字。  div{哈哈哈}


生成css
。。。

-----------------------------
vscode 格式化代码

shift+alt+f
也可以设置保存的时候自动格式化

1)文件------.>[首选项]---------->[设置]
2)搜索emmet.include;
3)在settings.json下的[用户] 中添加以下语句
editor.formatOnType :true,
editor.formatOnSave :true
只需要设置一次即可，以后都可以自动保存格式化代码




-----------------------------------------------------------------------
复合选择器
是对基础选择器进行组合。

复合选择器可以更准确，更高效的选择目标标签
复合选择器是由两个或多个基础选择器，通过不同方式组合而成的。
常用的复合选择器有：后代选择器，子选择器，并集选择器，伪类选择器等

-----------------------
后代选择器(包含选择器)：
元素1 元素2 ... { 样式 }  元素1 元素2空格隔开。并且元素2是在元素1里包含的。
元素1，元素2可以是任意基础选择器。 
元素2可能不是元素1的下一级，可能是下下级，下下下级。只要在元素1标签中包含都能被选择。


-----------------------
子选择器(子元素选择器)
只能选择作为某元素的下一级子元素。简单理解就是选亲儿子元素。

语法：
元素1 > 元素2 {样式}。表示元素1里面的所有直接后代(子元素)元素2
元素1是父级，元素2是子级。


-----------------------
并集选择器
可以选择多组标签，同时为他们定义相同的样式。通常用于集体声明

元素1,元素2 {样式}   表示元素1，元素2 都改成这个样式
用逗号分隔。任何形式的基础选择器都可以使用。



-----------------------
伪类选择器
用于向某些选择器添加特殊的效果。比如给链接添加特殊效果，或选择第一个，第n个元素。

伪类选择器最大的特点是用用冒号表示。 比如  :hover、:first-child

伪类选择器有很多，比如链接伪类，结构伪类，这里几个常用的。

链接伪类：
a:link    选择所有未被访问的链接
a:visited   选择所有已被访问的链接
a:hover     选择鼠标指针位于其上的链接
a:active     选择活动链接(鼠标按下未弹起的)
按照link，visited，hover，active的顺序来写。否则可能不生效


focus伪类选择器
:focus伪类选择器 用于选取获得焦点的表单元素。
焦点就是光标，一般情况下 <input> 表单元素才能获取，因此这个选择器也主要针对表单元素来说。
例如：
input:focus {
	background-color: pink;
}



-----------------------------------------------------------------------
css的元素显示模式

元素显示模式就是元素(标签)以什么方式进行显示。比如div自己占一行。比如一行可以放多个span
HTML内的元素可分为两类：块元素，行内元素。

------------
块元素
h1~h6，p，div，ul，ol，li等。
块元素特点：
独占一行；
高度，宽度，外边距，内边距都可以控制（默认宽度是父级宽度的100%，和父级一样宽）
当作容器以及盒子，里面也可以放块元素和行内元素。
文字类的元素内不能使用块元素，比如p，h1~h6内不能放div。

------------
行内元素(有的地方也叫内联元素)
a，strong，b，em，i，del，s，ins，u，span 等
行内元素特点：
一行可显示多个；
高度和宽度的直接设置是无效的（可通过模式转换间接设置）；
默认宽度是其内容本身的宽度；
行内元素只能容纳文本或其它行内元素。

注意：
超链接a里不能放超链接a；
但是超链接里可以放块级元素，但是给超链接转换为块级模式最安全。


------------
行内块元素
同时具有块元素和行内元素的特点，
img，input，td等。

行内块元素特点：
一行可显示多个，但是中间会有空隙；
默认宽度为本身内容的宽度；
高度，宽度，内外边距可以被控制。




-----------------------------------------------
元素显示模式转换

特殊情况下，我们需要元素模式的转换，简单理解：一个模式的元素需要另外一种模式的特性

例如：增加a标签的处罚范围

转换为块元素：display:block;
a {
	width: 150px;
	height: 50px;
	background-color: pink;
	/* 把行内元素 a 转换为 块级元素 */
	display: block;
}

转换为行内元素
display: inline;

转换为行内块元素
display: inline-block;




-------------------------
一个小工具
snipaste
截图工具，可以贴在屏幕上




-----------------------------------------------------------
小技巧，单行文字垂直居中

css没有提供文字垂直居中的代码，这里可以用一个小技巧实现。

解决方案：
让文字的行高(line-height)等于盒子的高度(height)。就可以让文字在当前盒子内垂直居中

原理:
行高(line-height)是由文字本身高度加上上间隙和下间隙组成的。上下空隙高度永远是平均分的
如果行高等于盒子的高度，则行高的上间隙和下间隙会把文字挤到中间。
如果行高小于盒子的高度，则文字会偏向盒子中上方。
如果行高大于盒子的高度，则文字会偏向盒子中下方。



--------------------------------------------------------------------
css的背景属性

背景颜色
background-color: transparent 默认是透明

背景图片
background-image
实际开发中常见于logo或者一些装饰性的小图片或者是超大的背景图片，优点是便于控制位置。
background-image: none | url(路径)。默认是none

页面元素既可以添加背景颜色也可以添加背景图片 只不过背景图片会压住背景颜色


背景平铺
background-repeat
在html页面上对背景图片进行平铺。
background-repeat: repeat | no-repeat | repeat-x | repeat-y 。默认是repeat平铺的。


背景图片位置
background-position: x y;
x,y指的是坐标。可以使用 top,center,left,bottom,right等方位名词，也可直接跟数字坐标

如果两个都是方位名词，则两个值的前后顺序无关。
right center 和 center right 效果是等价的 跟顺序没有关系
如果只指定了一个，另一个省略，则第二个默认居中对齐。


如果是数字坐标，则第一个是x坐标，第二个是y坐标。如果只写了一个，则是x，然后第二个垂直居中。


可以混合使用，第一个是x坐标，第二个是y坐标



背景图像固定(背景附着)
background-attachment 属性设置图片是否固定或者随着页面的其余部分滚动。
background-attachment: scroll | fixed




背景属性复合写法(与字体的类似)
background
没有特定的书写顺序，一般习惯约定为：
background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置



背景色半透明
background: rgba(0,0,0,0);
最后一个a是alpha透明度。取值0-1之间。0是100%透明，1是不透明





------------------------------------------------------------------------------------------
css三大特性

层叠性，继承性，优先级

--------------
层叠性
相同选择器给设置相同的样式，此时一个样式就会覆盖另一个冲突的样式。
层叠性原则：
样式冲突，遵循就近原则。哪个样式离结构近，就执行哪个样式。
样式不冲突，不会层叠


---------------
继承性

css中的继承：子标签会继承父标签的某些样式，如文本颜色和字号。

恰当的使用继承可以简化代码，降低css样式的复杂性。
子元素可以继承父元素的样式(text-，font-，line-，这些元素开头的可以继承，以及color)

font: 12px/1.5。行高可以不跟单位，此时这个1.5 就是当前元素文字大小 font-size 的1.5倍



---------------
优先级

当同一个元素指定多个选择器(标签，类，id选择器，通配符),就会有优先级的产生。

选择器相同，则执行层叠性，就近原则。
选择器不同，则根据选择器权重选择。


各个选择器权重：
继承或者通配符选择器   0000  可看成0
标签选择器             0001  可看成1
类选择器，伪类选择器    0010  可看成10
id选择器               0100   可看成100
行内样式               1000   可看成1000
!important            无穷大(最大)

注意: 
继承的权重是0
a链接，浏览器默认指定了一个样式，蓝色的，有下划线 。 a { color:blue}


复合选择器，会有权重叠加，需要计算权重。

<style>
	/* 复合选择器会有权重叠加的问题 */
	/* 权重虽然会叠加,但是永远不会有进位 */
	/* ul li 权重  0,0,0,1 + 0,0,0,1  =  0,0,0,2     2 */
	ul li {
		color: green;
	}

	/* li 的权重是 0,0,0,1    1 */
	li {
		color: red;
	}

	/* .nav li  权重    0,0,1,0  +  0,0,0,1  =  0,0,1,1    11 */
	.nav li {
		color: pink;
	}
</style>

<ul class="nav">
	<li>大猪蹄子</li>
	<li>大肘子</li>
	<li>猪尾巴</li>
</ul>






------------------------------------------------------------------------------------------
css盒子模型

网页布局过程：
1、先准备好相关的网页元素(标签)，网页元素基本都是盒子
2、给盒子设置好样式，摆放在相应的位置。
3、往盒子内填内容。

所谓盒子模型，就是把html页面的布局元素看作是一个矩形的盒子，就是一个盛装内容的容器。
css盒子模型本质上就是一个盒子，封装周围的html元素，包括：边框，内边距，外边距，实际内容。

内边距padding是 内容与边框之间的距离。
外边距margin是 盒子与盒子之间的距离。


----------------
边框border

边框由三部分组成：边框粗细(宽度)，边框颜色，边框样式(实线,虚线,点线)。

border-width
border-style  边框的样式  solid 实线边框   dashed 虚线边框  dotted 点线边框
border-color

边框的复合写法 简写:  border: 5px solid pink;  没有顺序。

边框可以分开写：
border-top: 5px solid pink;   上边框
border-bottom: 5px solid pink;   下边框
border-left: 5px solid pink;   左边框
border-right: 5px solid pink;   右边框


表格的细线边框
border-collapse属性控制浏览器绘制表格边框的方式。控制相邻单元格的边框。

border-collapse:collapse;    合并相邻的边框



边框会影响盒子的实际大小。
设置了width，height后，再加了边框。则总的宽高会加上边框的长度。

要保证跟效果图一样的宽高，则让width，height减去多出来的边框的长度。


----------------
内边距(padding)
内容与内边框之间的距离。

padding-top     上内边距
padding-bottom  下内边距
padding-left    左内边距
padding-right   右内边距

复合写法: 
padding: 5px;         跟一个值，代表上下左右都是5像素。
padding: 5px 10px;     两个值，代表上下内边距是5，左右是10
padding: 5px 10px 20px;     三个值，代表上内边距是5，左右是10，下是20
padding: 5px 10px 20px 30px;    四个值，上右下左的顺序。


padding会影响盒子大小
设置了width，height后，再加了padding。则总的宽高会加上padding的长度。  撑大盒子

要保证跟效果图一样的宽高，则让width，height减去多出来的padding的长度。


小运用：
因为每个导航栏的字数不一样多，可以不用给盒子设置宽度，直接给padding。(新浪导航案例)


如果盒子本身没有指定width/height属性，则此时padding不会撑开盒子。(这里有个问题，上面新浪导航栏案例没有指定width，怎么撑开了)




----------------
外边距(margin)
盒子与盒子之间的距离。
margin-top     上外边距
margin-bottom  下外边距
margin-left    左外边距
margin-right   右外边距


margin的复合写法与padding一样。

外边距应用：
外边距可以让块级盒子水平居中，满足两个条件：
1、盒子必须指定了宽度
2、盒子左右的外边距都设置为auto

以上是针对块元素。行内元素或者行内块元素水平居中可以给父元素添加text-align:center;


外边距合并
使用margin定义块元素的垂直外边距(margin-top,margin-bottom)时，会出现外边距的合并。

主要两种情况：
1、相邻块元素垂直外边距的合并
2、嵌套块元素垂直外边距的塌陷


相邻块元素垂直外边距的合并
当上下相邻的两个块元素(兄弟关系)相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的边距不是相加，而是取两个值中较大的一个。这种现象是相邻块元素垂直外边距的合并。
解决方案：尽量只给一个盒子设置外边距


嵌套块元素垂直外边距的塌陷
对于两个嵌套关系的块元素，父元素有上外边距，同时子元素也有上外边距，此时父元素会塌陷较大的外边距值。可用下面代码看效果。
 <style>
	.father {
		width: 400px;
		height: 400px;
		background-color: purple;
		margin-top: 50px;
		/* border: 1px solid red; */
		/* border: 1px solid transparent; */
		/* padding: 1px; */
		/*  overflow: hidden; */ 
	}

	.son {
		width: 200px;
		height: 200px;
		background-color: pink;
		margin-top: 100px;
	}
</style>

<body>
    <div class="father">
        <div class="son"></div>
    </div>
</body>
解决方案：
1、可以为父元素定义上边框
2、可以为父元素定义上内边距
3、可以为父元素添加overflow：hidden




清除内外边距
有些网页元素(标签)有自带的默认的内外边距，而且不同浏览器默认也不一致。因此我们布局前，可以清除一下网页标签的内外边距
* {
	margin: 0;
	padding: 0;
}
这句话也是我们css 的第一行代码

行内元素为了兼容性，尽量只设置左右的内外边距






------------------------------------------------------------------------------------------
ps操作
实际中用ps精确测量各种距离和取颜色。




------------------------------------------------------------------------------------------
圆角边框
border-radius：length;
border-radius 设置元素的外边框圆角。


------------------------------------------------------------------------------------------
盒子阴影
box-shadow：h-shadow v-shadow blur spread color inset;

h-shadow      水平阴影的位置。允许负值。必需。
v·shadow      垂直阴影的位置。允许负值。必需。
blur          模糊距离，可选。
spread        阴影的尺寸。可选。
color         阴影的颜色，请参阅 CSS 颜色值。可选。
inset         将外部阴影(outset) 改为内部阴影。可选。

阴影不占用空间。


文字阴影
text-shadow






------------------------------------------------------------------------------------------
浮动(float)  加了浮动相当于这个标签飘起来了，跟标准流的标签盒子不在一个平面上了。

有很多的布局效果，标准流无法完成，此时就可以利用浮动完成布局。因为浮动可以改变元素标签默认的排列方式。

浮动典型应用：可以让多个块元素一行内排列显示

##################################
网页布局第一准则，多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动。
##################################

float: none(默认)/left/right

float属性用于创建浮动框，将其移到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。


###########重难点#############
浮动特性：
1、浮动元素会脱离标准流。
2、浮动的元素会一行内显示并且元素顶部对齐。
3、浮动的元素会具有行内块元素的特性。


1、浮动元素会脱离标准流(脱标)
脱离标准流的控制，浮动到指定位置(脱标)。浮动的盒子不在保留原来的位置，被其他元素占用。

2、如果多个盒子都设置了浮动，则它们会按照属性值一行内显示并且顶端对齐排列。
浮动的元素互相贴在一起，不会有缝隙，如果父级的宽度装不下这些浮动的盒子，会另起一行显示。

3、浮动的元素会具有行内块元素的特性。
任何元素都可以浮动，不管之前是什么模式的元素，添加浮动之后具有行内块元素的特性。
如果块级盒子没有设置宽度，默认和父级一样宽，但是添加浮动后，宽度就是它本身内容的宽度。


为了约束浮动元素位置，我们网页布局一般采取的策略是：
先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置。符合网页布局第一准则。



浮动注意点：
1、浮动和标准流的父盒子搭配使用
2、一个元素浮动了，理论上其余的兄弟元素也要浮动。(浮动的盒子只会影响浮动盒子后面的标准流，不会影响前面的。)


----------------------
清除浮动

为什么要清除浮动：
由于父盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为0时，就会影响下面标准流的盒子。

清除浮动的本质：
·清除浮动造成的影响。
·如果父盒子本身有高度，则不需要清除浮动。
·清除浮动之后，父级就会根据浮动的子盒子自动扩展高度，父级有了高度，就不会影响下面标准流的盒子了。

清除浮动语法：
clear: left/right/both;
工作中，几乎只用clear:both;

清除浮动的策略是：闭合浮动。(只让浮动在父盒子内部影响，不影响父盒子外面的其他盒子)

清除浮动的方法：
1、额外标签法，也称隔墙法
2、父级添加overflow属性
3、父级添加after伪属性
4、父级添加双伪属性


1、额外标签法，也称隔墙法，w3c推荐的做法。
额外标签法是在浮动元素末尾添加一个空的标签。例如：<div style="clear:both"></div>
这个新增的空标签要求必须是块级元素不能是行内元素

2、父级添加overflow属性
属性值设置为hidden，auto或者scroll都可。

3、父级添加after伪属性
:after 方式是额外标签法的升级版，也是给父元素添加。使用下面的代码。(固定写就行)

.clearfix:after {
	content: "";
	display: block;
	height: 0;
	clear: both;
	visibility: hidden;
}

.clearfix {
	/* 兼容ie6，7。 */
	*zoom: 1;
}

<div class="box clearfix">
	<div class="damao">大毛</div>
	<div class="ermao">二毛</div>
</div>


4、父级添加双伪属性
使用下面的代码。(固定写就行)
.clearfix:before,
.clearfix:after {
	content: "";
	display: table;
}

.clearfix:after {
	clear: both;
}

.clearfix {
	*zoom: 1;
}
<div class="box clearfix">
	<div class="damao">大毛</div>
	<div class="ermao">二毛</div>
</div>


----------------------------------------------------------------------------
图像格式
psd图像格式是ps的专用格式，里面可以存放图层，通道，遮罩等多种设计稿。
对前端人员来说，最大的优点，我们可以直接从上面复制文字，获得图片，测量大小和距离。

ps切图
图层切图
切片切图
ps插件cutterman切图




-----------------------------------------------------------------------------------------------------------
学成在线案例

1、准备素材，psd源文件
2、ps等切图工具。vscode开发工具，chrome浏览器
3、采取结构样式相分离。



css属性书写顺序:（建议遵循以下顺序）
1、布局定位属性：display/position/float/clear/visibility/overflow  (建议display第一个写，毕竟关系到模式)
2、自身属性：width/height/margin/padding/border/background
3、文本属性：color/font/text-decoration/text-align/vertical-align/white-space/break-word
4、其他属性：content/cursor/border-radius/box-shadow/text-shadow/background:linear-gradient...


页面布局整体思路：
1、确定页面的版心，测量可得。
2、分析页面中的行模块，以及每个行模块中的列模块。页面第一准则。
3、一行中的列模块经常浮动布局，先确定每个列的大小，之后确定列的位置，布局页面第二准则。
4、制作html结构。遵循先有结构，后有样式的原则。

所以，先理清布局结构，再写代码很重要。需要多积累。



导航栏注意点：
实际开发中，我们不会直接使用链接a标签，而是用li包含a的做法。
1、li+a 语义更清晰，一看就是有条理的列表型内容。
2、如果直接用a，搜索引擎容易辨别为有堆砌关键字嫌疑。(故意堆砌关键字容易被搜索引擎有降权的风险。)从而影响网站排名。

浮动的盒子不会有外边距合并的问题。






-------------------------------------------------------------------------------------------------
定位

为什么需要定位：
定位可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。

定位可以任意的移动位置。

定位 = 定位模式 + 边偏移
定位模式用于指定 一个元素在文档中的定位方式。
边偏移 则决定了该元素的最终位置。


定位模式
定位模式决定元素的定位方式，通过css的position属性设置。
position:  static(静态定位)/relative(相对定位)/absolute(绝对定位)/fixed(固定定位)


边偏移
有top，bottom，left，right4个属性
top   顶部偏移量，定义元素相对于父级元素上边线的距离
bottom   底部偏移量，定义元素相对于父级元素下边线的距离
left    左部偏移量，定义元素相对于父级元素左边线的距离
right  右部偏移量，定义元素相对于父级元素右边线的距离
 

---------------
静态定位

是元素的默认定位方式，即无定位的意思。
语法：position：static

静态定位按照标准流特性摆放位置，没有边偏移。
很少用到。

--------------
相对定位
语法：position：releative

相对定位是元素在移动位置的时候，是相对于它原来的位置来说的。(自恋型)

相对定位特点：
1、它是相对于自己原来的位置来移动的。(移动的时候的参照点是自己原来的位置)
2、原来在标准流的位置继续占有，后面的盒子仍然以标准流的方式对待它。(继续保留之前的位置，后面的盒子不会占有它)

移动元素会导致它覆盖其它框。


--------------
绝对定位
语法：position：absolute

特点：
1、绝对定位的元素的位置相对于最近的已定位祖先元素(不止是父元素)，如果元素没有已定位的祖先元素，那么它的位置相对于浏览器。
2、绝对定位不在占有原先的位置。


------------------
子绝父相

子元素是绝对定位的话，父级要用相对定位

子元素是绝对定位的话，可以放在父盒子的任意位置，不会影响别的兄弟盒子
父盒子需要加定位限制子盒子在父盒子内显示。同时，父盒子布局时，需要占有位置，因此使用相对定位。


这就是子绝父相的由来，所以相对定位经常用来作为绝对定位的父级。


补充学成在线案例的hot小图片。使用子绝父相。



-------------------
固定定位
语法：position：fixed

固定定位是元素固定于浏览器可视区的位置。主要使用场景：可以在浏览器页面滚动时元素在浏览器显示的位置不变。

固定定位特点：
1、以浏览器的可视窗口为参照点移动元素。
跟父元素没任何关系。
不随滚动条滚动。
2、固定位置不再占有原先的位置.

<!--  固定定位小技巧-固定到版心右侧 -->
1、让固定定位的盒子left 50%，走到浏览器可视区(也可看做版心)的一半位置
2、让固定定位的盒子 margin-left：版心宽度的一半距离。 多走版心宽度的一半位置。
就可以让固定定位的盒子贴着版心右侧对齐了。




-------------------
粘性定位
语法：position：sticky

粘性定位可以被认为是相对定位和固定定位的混合。

粘性定位特点：
1、以浏览器的可视窗口为参照点移动元素。 (固定定位特点)
2、粘性定位占有原来位置。（相对定位特点）
3、必须添加top，bottom，left，right其中一个才有效。



----------------------
定位叠放次序
在使用定位布局时，可能会出现盒子重叠的情况。此时，可以使用z-index来控制盒子的前后次序。(z是z轴)

属性z-index
语法：z-index：1

数值可以是正数或者负数。默认是auto。数值越大，盒子越靠上。
如果数值相同，按照书写顺序，后者居上。
数字后面不能加单位。
只有定位的盒子才有z-index属性。




----------------------
定位拓展。

1、绝对定位的盒子居中。
加了绝对定位的盒子不能通过margin: 0 auto水平居中.但是可以通过下面方法实现水平和垂直居中
/* 1. left 走 50%  父容器宽度的一半 */
/* 2. margin 负值 往左边走 自己盒子宽度的一半 */

.box {
	position: absolute;

	/* 1. left 走 50%  父容器宽度的一半 */
	left: 50%;
	/* 2. margin 负值 往左边走 自己盒子宽度的一半 */
	margin-left: -100px;
	top: 50%;
	margin-top: -100px;
	width: 200px;
	height: 200px;
	background-color: pink;
	/* margin: auto; */
}
<body>
    <div class="box"></div>
</body>



2、定位特殊特性
	绝对定位和固定定位和浮动类似。
	1、行内元素添加绝对或者固定定位，可以直接设置宽度和高度。
	2、块元素添加绝对或者固定定位，如果不给宽度或者高度。默认是内容的大小。



3、脱标的盒子不会触发外边距塌陷。
浮动元素，固定定位，绝对定位的元素都不会触发外边距合并的问题。


4、绝对定位(固定定位)会完全压住盒子。
浮动元素不同，只会压住它下面的标准流的盒子。但是不会压住下面标准流盒子里面的文字或者图片。
但是绝对定位，固定定位会压住下面所有内容。
浮动之所以不会压住文字，是因为浮动产生的最初目的是为了做文字环绕效果的。文字会围绕浮动元素。


-------------------------
注意：
如果一个盒子既有left属性也有right属性，则默认会执行 left属性 同理  top  bottom  会执行 top






--------------------------------------------------
元素的显示和隐藏
本质：让一个元素在页面中隐藏或者显示出来

1、display显示隐藏
2、visibility显示隐藏
3、overflow 溢出显示隐藏


-------------
display属性
用于设置一个元素如何显示。

display：none；隐藏对象
display：block；除了转换为块级元素外，同时还有显示元素的意思。

display：none；隐藏对象后，不再占有之前的位置。

display属性应用极其广泛，搭配js使用能做很多特效。


-------------
visibility属性

visibility：visible; 元素可视
visibility：hidden 元素隐藏

visibility 隐藏元素后，继续占有原来的位置。



-------------
overflow属性
对溢出的部分进行隐藏，显示。

overflow：visible/hidden/scroll/auto

visible  默认，不剪切内容也不增加滚动条
hidden   不显示超过对象尺寸的内容，超出部分隐藏
scroll   不管超出内容是否，总是显示滚动条
auto     超出自动显示滚动条，不超出不显示滚动条






-------------------------------------------------------------------------------
精灵图

一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁的接收和发送请求图片，造成服务器压力过大。
这将大大降低页面的加载速度。
因此，为了有效的减少服务器接收和发送请求的次数，提高页面的加载速度，出现了css精灵技术。(也称css sprites，css雪碧)

核心原理：将网页中的一些小背景图像整合到一张大图中，这样服务器只需要请求一次就行了。


精灵技术主要针对于背景图片的使用，就是把多个小背景图片整合到一张大图上。
这个大图片也称为sprites精灵图或雪碧图
移动背景图片位置，可以用background-position
移动的距离就是这个背景图片的x，y坐标。



-------------------------------------------------------------------------------
字体图标

网页中经常会有一些小图标。
精灵图缺点也很明显：1、图片文件还是比较大的。2、图片本身放大缩小会失真。3、一旦制作完，想要更换比较复杂。

此时：有一种技术出现解决了这个问题，就是字体图标 iconfont
字体图标为前端开发提供了一种方便高效的图标使用方式，展示的是图标，本质是字体。

字体图标的优点：
1、轻量级，一个图标字体要比一系列的图像要小。
2、灵活，本质是字体，可以随意更改颜色，字体大小，产生阴影，等属性
3、兼容性，几乎兼容所有浏览器。
注意：字体图标不能替代精灵技术，只是对图标部分技术的优化和提升。

字体图标是一些网页中常见的小图标，我们直接从网上下载即可。
1、下载。2、引入到html中。
下载网站：
1、icomoon字库。 http://icomoon.io  国外的网占
2、阿里iconfont字库。 https//www.iconfont.cn




-------------------------------------------------------------------------------
三角制作

div {
	width: 0;
	height: 0;
	line-height: 0;
	font-size: 0;
	border: 5px solid transparent;
	border-bottom-color: green;
}

宽高为0，设置边框为不同颜色时，会发现有三角，然后将其余三边的颜色设置为透明，就只显示一个三角了。




-------------------------------------------------------------------------------
css用户界面样式
1、更改用户的鼠标样式
2、表单轮廓
3、防止表单域拖拽



------------
更改用户的鼠标样式
cursor：pointer/default/move/text/not-allowed


------------
表单轮廓线
outline

 /* 取消表单轮廓 */
outline: none;


------------
防止文本域拖拽

/* 防止拖拽文本域 */
resize: none;






-------------------------------------------------------------------------------
vertical-align 属性

css的vertical-align属性使用场景：经常用于设置图片或者表单(行内块元素)和文字垂直对齐。

官方解释：用于设置一个元素的垂直对齐方式，但是它只针对于行内元素或者行内块元素有效。

vertical-align: middle/...;

baseline	默认。元素放置在父元素的基线上。
top	     把元素的顶端与行中最高元素的顶端对齐（顶线）
middle	 把此元素放置在父元素的中部。（中线）
bottom	  把元素的顶端与行中最低的元素的顶端对齐。（底线）


-------
vertical-align解决图片底部默认空白缝隙问题

bug：图片底侧有一个空白缝隙，原因是因为行内块元素会和文字的基线对齐。

解决方案：
1、给图片添加vertical-align：top|middle|bottom。只要不是基线对齐就行。（提倡使用）
2、把图片转为块级元素。






-------------------------------------------------------------------------------
溢出文字用省略号显示


-----
单行文本溢出

先强制一行显示文本。white-space: nowrap; 这个单词的意思是如果文字显示不开也必须强制一行内显示。  默认normal，自动换行
overflow: hidden; 溢出的部分隐藏起来
text-overflow: ellipsis;  文字溢出的时候用省略号来显示


-----
多行文本溢出
该方式有较大兼容性问题，适合于webkit浏览器或移动端。（移动端大部分是webkit内核）

overflow: hidden;
text-overflow: ellipsis;
display: -webkit-box;      /* 转换为 弹性伸缩盒子模型显示 */
-webkit-line-clamp: 3;    /* 限制在一个块元素显示的文本的行数 */
-webkit-box-orient: vertical;     /* 设置或检索伸缩盒对象的子元素的排列方式 */






-------------------------------------------------------------------------------
常见布局技巧

1、margin负值运用
2、文字围绕浮动元素
3、行内块的巧妙运用(行内块，行内元素。给父元素设置text-align：center时。都会居中)
4、css三角强化



这部分看代码吧，看了代码不知道代码在写啥也可以看视频。。。就不记了。。。




-------------------------------------------------------------------------------
css初始化

不同浏览器对有些标签的默认值是不同的，为了消除不同浏览器对html文本呈现的差异，照顾浏览器的兼容，我们需要对css初始化。

css初始化是指重设浏览器的样式。

每个网页都必须进行初始化。





-------------------------------------------------------------------------------
css3新增特性

新增选择器，css3盒子模型及一些其他特性


----------------------------------------
新增选择器

1、属性选择器
2、结构伪类选择器
3、伪元素选择器

---------------
1、属性选择器
可以根据元素特定属性来选择元素。

E[att]   选择具有att属性的E元素
E[att="val"]   选择具有att属性的，且值为val的E元素
E[att^="val"]   选择具有att属性，并且值以val开头的E元素。
E[att$="val"]   选择具有att属性，并且值以val结尾的E元素。
E[att*="val"]   选择具有att属性，并且值中包含val的E元素。


类选择器、属性选择器、伪类选择器，权重是10



---------------
2、结构伪类选择器
结构伪类选择器主要根据文档结构来选择元素。

E:first-child     选择父元素中的第一个子元素E
E:last-child      选择父元素中的最后一个子元素E
E:nth-child(n)       匹配父元素中的第 n 个子元素E。  n可以是数字，关键字(even偶数，odd奇数)，公式。如果是公式(从0开始计算，第0个或超出的会被忽略)，只能写n。不能写a，b等其他字母。只写n的话就是所有的。
E:first-of-type    指定类型 E 的第一个
E:last-of-type     指定类型 E 的最后一个
E:nth-of-type(n)    指定类型 E 的第 n 个




nth-child 会把所有的盒子都排列序号 执行的时候首先找到第几个孩子，之后回去看 前面 标签，匹配不上就选不出来。
nth-of-type 会把指定元素的盒子排列序号 执行的时候首先看  指定的元素  之后回去看 :nth-of-type(1) 第几个孩子


---------------------
3、伪元素选择器
伪元素选择器可以帮助我们利用css创建新标签元素，而不需要html标签，从而简化html结构。

::before  在元素内部的前面插入内容
::after   在元素内部的后面插入内容


before和after创建一个元素，但是属于行内元素
新创建的这个元素在文档树中是找不到的，所以我们称为伪元素
语法：element::before {}。 例如：div::after {}
before和after必须有content属性。
before在父元素内容的前面创建元素，after在父元素内容的后面插入元素
伪元素选择器和标签选择器一样，权重为1

可查看代码，学习其使用。





-----------------------------------------------------------------------------------
css3盒子模型

css3中可以通过box-sizing来指定盒模型，有2个值：即可指定为content-box、border-box，这样我们计算盒子大小的方式就会发生改变。

box-sizing: content-box/border-box;

可以分为两种情况：
1、box-sizing:content-box盒子大小为width+padding+border（之前默认的）
2、box-sizing:border-box盒子大小为width

如果盒子模型我们改为了box-sizing:border-box,那padding和border就不会撑大盒子了。(前提是padding和border不会超过width宽度)



-----------------------------------------------------------------------------------
css3的其他特性

1、图片变模糊
2、计算盒子宽度width，calc函数。


--------------------
图片变模糊

css3滤镜filter
filter css属性将模糊或颜色偏移等图形效果应用于元素。

语法：filter：函数();   例如：filter：blur(5px);    blur模糊处理，数值越大越模糊。


--------------------
计算盒子宽度width，calc函数。

calc这个css函数让你在声明css属性值的时候执行一些计算。

例如：calc(100% - 30px)。 子盒子永远比父盒子小30



--------------------
css3过渡

过渡(transition)是css3中具有颠覆性的特征之一，我们可以在不使用flash动画或JavaScript的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。

过渡动画：是一个状态渐渐的过渡到另外一个状态。
可以让我们的页面更好看，更动感十足，虽然低版本浏览器不支持，但是不会影响页面布局。

经常与:hover搭配使用。


语法：transition：要过渡的属性 花费时间 运动曲线 何时开始


要过渡的属性: 想要变化的css属性，(宽高，颜色，内外边距。所有属性都变化过渡，则写一个all就行。)
花费时间：单位秒。必须写单位。比如: 0.5s
运动曲线：默认是ease。(可以省略)
何时开始：单位是秒，必须写单位。可以设置延迟触发时间。默认是0s。可以省略。

如果要写多个属性，则可以用逗号分隔。







----------------------------------------------------------------------------------------------------
广义的html5

广义的html5是html5本身+css3+js





















