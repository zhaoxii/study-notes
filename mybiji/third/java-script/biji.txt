------------------------------------------------------
初识javascript

运行在客户端的脚本语言。

不需要编译，运行过程中由js解释器(js引擎)逐行进行解释并执行。
也可以通过node.js技术进行服务器端编程


------------------------
浏览器执行js简介

浏览器分为两部分：渲染引擎和js引擎

渲染引擎：用来解析html和css，俗称内核。比如chrome的blink，老版本的webkit
js引擎：也称为js解释器。用来读取网页中的js代码，对其处理后运行，比如chrome浏览器的v8

浏览器本身并不会执行代码，而是通过内置的js引擎(解释器)来执行js代码，js引擎执行代码时逐行解释每一句源码(转换为机器语言)，然后由计算机去执行，
所以JavaScript语言归为脚本语言，会逐行解释执行。



------------------------
js的组成

JavaScript的三大组成部分是：
1、ECMAscript；2、文档对象模型DOM；3、浏览器对象模型BOM。
其中，ECMAscript是javascript的核心，描述了语言的基本语法和数据类型。

dom(Document object model)是w3c组织推荐的处理可扩展标记语言的标准编程接口。通过dom提供的接口可以对页面上的各种元素进行操作。

bom(Browser object model)是指浏览器对象模型，他提供了独立于内容的，可以与浏览器窗口进行互动的对象结构。通过bom可以操作浏览器窗口。
比如：弹出框，控制浏览器跳转，获取分辨率等。




----------------------------------------
js有三种书写位置，分别为行内，内嵌和外部。


-----------
行内式

可以将单行或少量js代码写在html标签的事件属性中。(以on开头的属性，例如：onclick)
注意单双引号的使用，在html中我们推荐使用双引号，js中推荐用单引号
可读性差，在html中编写大量代码时，不方便阅读
引号易错，引号多层嵌套匹配时，非常容易弄混。
特殊情况下使用。


------------
内嵌式
可将多行js代码写到<script>标签中。
内嵌hs是学习时常用的。



------------
外部js文件

利于html页面代码结构化，把大段js代码独立到html页面之外，既美观，也方便文件级别的复用
引用外部js文件时的script标签中间不可以写代码
适合于js代码量比较大的情况。



------------
js的注释

单行注释，多行注释。
//   单行注释
/*  */ 多行注释


------------
js的输入输出

alert(msg)      浏览器弹出警示框
console.log(msg)    浏览器控制台打印输出信息
prompt(info)     浏览器弹出输入框，用户可以输入

alert只要用来显示消息给用户。
console.log用来给程序员自己看运行时的消息。



------------
变量

定义变量： var 变量名;

var是js的关键字,用来声明变量(variable变量的意思).使用该关键字声明后,计算机会自动为变量分配内存空间,不需要程序员管.

变量初始化: 例子: var age = 18;

定义多个变量: var age=10,myname="lucy";

特殊情况:  
1、age = 10 console.log(age)  不声明,只赋值。  结果：10
2、var age;  console.log(age)  只声明，不赋值。  结果：undefined
3、console.log(age)          不声明，不赋值。   结果： 报错




--------------------------------------
数据类型

JavaScript 是一种弱类型或者说动态语言。这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。

在代码运行时，变量的数据类型是由 JS引擎 根据 = 右边变量值的数据类型来判断 的，运行完毕之后， 变量就确定了数据类型。
JavaScript 拥有动态类型，同时也意味着相同的变量可用作不同的类型：

JS 把数据类型分为两类：
简单数据类型 （Number,String,Boolean,Undefined,Null）
复杂数据类型 （object)

-------------------------
Number类型

JavaScript中数值的最大和最小值
alert(Number.MAX_VALUE); // 1.7976931348623157e+308
alert(Number.MIN_VALUE); // 5e-324

3. 数字型三个特殊值
alert(Infinity);  // Infinity
alert(-Infinity); // -Infinity
alert(NaN);       // NaN
Infinity ，代表无穷大，大于任何数值
-Infinity ，代表无穷小，小于任何数值
NaN ，Not a number，代表一个非数值


isNaN()   用来判断一个变量是否为非数字的类型，返回 true 或者 false
var usrAge = 21;
var isOk = isNaN(userAge);
console.log(isOk);            // false ，21 不是一个非数字
var usrName = "andy";
console.log(isNaN(userName));  // true ，"andy"是一个非数字


-------------------------
string类型

字符串型可以是引号中的任意文本，其语法为 双引号 "" 和 单引号''
因为 HTML 标签里面的属性使用的是双引号，JS 这里我们更推荐使用单引号

字符串引号嵌套
JS 可以用单引号嵌套双引号 ，或者用双引号嵌套单引号 (外双内单，外单内双)
var strMsg = '我是"高帅富"程序猿';   // 可以用''包含""
var strMsg2 = "我是'高帅富'程序猿";  // 也可以用"" 包含''

字符串转义符

字符串长度
字符串是由若干字符组成的，这些字符的数量就是字符串的长度。通过字符串的 length 属性可以获取整个字符串的长度。
var strMsg = "我是帅气多金的程序猿！";
alert(strMsg.length); // 显示 11


字符串拼接
+ 号总结口诀：数值相加 ，字符相连

多个字符串之间可以使用 + 进行拼接，其拼接方式为 字符串 + 任何类型 = 拼接之后的新字符串
拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串
//1.3 数值字符串 + 数值
alert('11' + 12);     // 1112




-------------------------
布尔型 Boolean

布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。
布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。
console.log(true + 1);  // 2
console.log(false + 1); // 1

一个声明后没有被赋值的变量会有一个默认值 undefined ( 如果进行相连或者相加时，注意结果）
var variable;
console.log(variable);           // undefined
console.log('你好' + variable);  // 你好undefined
console.log(11 + variable);     // NaN
console.log(true + variable);   //  NaN

一个声明变量给 null 值，里面存的值为空（学习对象时，我们继续研究null)
var vari = null;
console.log('你好' + vari);  // 你好null
console.log(11 + vari);     // 11
console.log(true + vari);   //  1





--------------------------
获取变量的数据类型

typeof 可用来获取检测变量的数据类型


-------
字面量
字面量是由语法表达式定义的常量.




------------------------------------------------------
数据类型转换

----------------
转换为字符串

toString          var num= 1; alert(num.toString());
String() 强制转换    var num = 1; alert(String(num);
加号拼接字符串        var num = 1; alert(num+"我是字符串”)


toString() 和 String()  使用方式不一样
三种转换方式，我们更喜欢用第三种加号拼接字符串转换方式， 这一种方式也称之为隐式转换。


----------------
转换为数字型

parseInt(string)函数          将string类型转成整数数值型       parseInt('78')

parseFloat(string)函数      将string类型转成浮点数数值型     parseFloat('78.21')

Number() 强制转换函数      将string类型转换为数值型        Number('12')

js 隐式转换(- * /)        利用算术运算隐式转换为数值型      '12' -0

注意 parseInt 和 parseFloat 单词的大小写，这2个是重点
隐式转换是我们在进行算数运算的时候，JS 自动转换了数据类型



-----------------
转换为布尔型

Boolean()函数       

代表空、否定的值会被转换为 false，如 ''、0、NaN、null、undefined  
其余值都会被转换为 true
console.log(Boolean('')); // false
console.log(Boolean(0)); // false
console.log(Boolean(NaN)); // false
console.log(Boolean(null)); // false
console.log(Boolean(undefined)); // false
console.log(Boolean('小白')); // true
console.log(Boolean(12)); // true










-----------------------------------------------------------------------------------
javascript运算符


---------------------------
算术运算符
+，-，*，/，%(取余数)

浮点数的精度问题

浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数。
var result = 0.1 + 0.2;    // 结果不是 0.3，而是：0.30000000000000004
console.log(0.07 * 100);   // 结果不是 7，  而是：7.000000000000001

所以：不要直接判断两个浮点数是否相等 !  


----------------------------
递增和递减运算符

在 JavaScript 中，递增（++）和递减（ -- ）既可以放在变量前面，也可以放在变量后面。放在变量前面时，
我们可以称为前置递增（递减）运算符，放在变量后面时，我们可以称为后置递增（递减）运算符。
注意：递增和递减运算符必须和变量配合使用。 


++num 前置递增，就是自加1
使用口诀：先自加，后返回值
var  num = 10;
alert(++num + 10);   // 21


num++ 后置递增，就是自加1
使用口诀：先返回原值，后自加 
var  num = 10;
alert(10 + num++);  // 20



--------------------------
比较运算符

===   判断两边的数值和类型是否都相同。

console.log(18 == '18');    //true
console.log(18 === '18');   //false




-------------------------
逻辑运算符

短路运算（逻辑中断）

语法： 表达式1 && 表达式2
如果第一个表达式的值为真，则返回表达式2
如果第一个表达式的值为假，则返回表达式1
console.log( 123 && 456 );        // 456
console.log( 0 && 456 );          // 0
console.log( 123 && 456&& 789 );  // 789

短路运算的原理：当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;


语法： 表达式1 || 表达式2
如果第一个表达式的值为真，则返回表达式1
如果第一个表达式的值为假，则返回表达式2
console.log( 123 || 456 );         //  123
console.log( 0 ||  456 );          //  456
console.log( 123 || 456 || 789 );  //  123



---------------------------
赋值运算符

+=，-=，*=，/=，%=


--------------------------
运算符优先级







-----------------------------------------------------------------------------------
流程控制


分支结构(if,switch)

三元表达式：
三元表达式也能做一些简单的条件选择。 有三元运算符组成的式子称为三元表达式

1. 语法结构
表达式1 ? 表达式2 : 表达式3;

2. 执行思路 
如果表达式1为 true ，则返回表达式2的值，如果表达式1为 false，则返回表达式3的值
简单理解： 就类似于  if  else （双分支） 的简写


分支流程控制 switch 语句
switch 语句也是多分支语句，它用于基于不同的条件来执行不同的代码。当要针对变量设置一系列的特定值
的选项时，就可以使用 switch。
switch( 表达式 ){ 
    case value1:
        // 表达式 等于 value1 时要执行的代码
        break;
    case value2:
        // 表达式 等于 value2 时要执行的代码
        break;
    default:
        // 表达式 不等于任何一个 value 时要执行的代码
}


关键字 switch 后面括号内可以是表达式或值， 通常是一个变量
关键字 case , 后跟一个选项的表达式或值，后面跟一个冒号
switch 表达式的值会与结构中的 case 的值做比较 
如果存在匹配全等(===) ，则与该 case 关联的代码块会被执行，并在遇到 break 时停止，整个 switch 语句代码
执行结束
如果所有的 case 的值都和表达式的值不匹配，则执行 default 里的代码

注意： 执行case 里面的语句时，如果没有break，则继续执行下一个case里面的语句。



switch 语句和 if else if 语句的区别
① 一般情况下，它们两个语句可以相互替换
② switch...case 语句通常处理 case为比较确定值的情况， 而 if...else...语句更加灵活，常用于范围判断(大于、
等于某个范围)
③ switch 语句进行条件判断后直接执行到程序的条件语句，效率更高。而if...else 语句有几种条件，就得判断多
少次。
④ 当分支比较少时，if... else语句的执行效率比 switch语句高。
⑤ 当分支比较多时，switch语句的执行效率比较高，而且结构更清晰。









---------------------------------------------------------------------------------------------------
循环


-------
for

for(初始化变量; 条件表达式; 操作表达式 ){
    //循环体
}

初始化变量：通常被用于初始化一个计数器，该表达式可以使用 var 关键字声明新的变量，这个变量帮我们来记录次数。
条件表达式：用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。
操作表达式：每次循环的最后都要执行的表达式。通常被用于更新或者递增计数器变量。当然，递减变量也是可以的

执行过程：
1. 初始化变量，初始化操作在整个 for 循环只会执行一次。
2. 执行条件表达式，如果为true，则执行循环体语句，否则退出循环，循环结束。
3. 执行操作表达式，此时第一轮结束。
4. 第二轮开始，直接去执行条件表达式（不再初始化变量），如果为 true ，则去执行循环体语句，否则退出循环。
5. 继续执行操作表达式，第二轮结束。
6. 后续跟第二轮一致，直至条件表达式为假，结束整个 for 循环


断点调试：
断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试
过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下

断点调试可以帮我们观察程序的运行过程
浏览器中按 F12--> sources -->找到需要调试的文件-->在程序的某一行设置断点
Watch: 监视，通过watch可以监视变量的值的变化，非常的常用。
F11: 程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化


--------
while 循环

while 语句可以在条件表达式为真的前提下，循环执行指定的一段代码，直到表达式不为真时结束循环。
while语句的语法结构如下：
while (条件表达式) {
    // 循环体代码 
}
执行思路：
① 先执行条件表达式，如果结果为 true，则执行循环体代码；如果为 false，则退出循环，执行后面代码
② 执行循环体代码
③ 循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为true，则会继续执行循环体，直到循
环条件为 false 时，整个循环过程才会结束


--------
do while 循环

do... while 语句其实是 while 语句的一个变体。该循环会先执行一次代码块，然后对条件表达式进行判断，如
果条件为真，就会重复执行循环体，否则退出循环。
do... while 语句的语法结构如下：
do {
    // 循环体代码 - 条件表达式为 true 时重复执行循环体代码
} while(条件表达式);
① 先执行一次循环体代码 
② 再执行条件表达式，如果结果为 true，则继续执行循环体代码，如果为 false，则退出循环，继续执行后面
代码
执行思路：
注意：先再执行循环体，再判断，我们会发现 do...while 循环语句至少会执行一次循环体代码


---------
continue break








---------------------------------------------------------------------------------------------------
数组
数组中可存放任意类型的数据

创建数组：
1、var arr = new Array();
2、var a =[1,2,3,"2a"]

数组扩容
var arr=[1,2,3]
arr.length=10;  数组长度修改为10，有10个元素，没有值的是undefined

arr[3]=4  可以追加元素。





---------------------------------------------------------------------------------------------------
函数

函数在使用时分为两步：声明函数和调用函数。
// 声明函数
function 函数名() {
    //函数体代码
}
function 是声明函数的关键字,必须小写
由于函数一般是为了实现某个功能才定义的， 所以通常我们将函数名命名为动词，比如 getSum  

调用函数
// 调用函数
函数名();  // 通过调用函数名来执行函数体代码
调用的时候千万不要忘记添加小括号
口诀：函数不调用，自己不执行。
注意：声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码。
函数在使用时分为两步：声明函数和调用函数。

形参和实参
在声明函数时，可以在函数名称后面的小括号中添加一些参数，这些参数被称为形参，而在调用该函数时，
同样也需要传递相应的参数，这些参数被称为实参。

参数的作用 : 在函数内部某些值不能固定，我们可以通过参数在调用函数时传递不同的值进去。

// 带参数的函数声明
function 函数名(形参1, 形参2 , 形参3...) { // 可以定义任意多的参数，用逗号分隔
  // 函数体
}
// 带参数的函数调用
函数名(实参1, 实参2, 实参3...); 


函数形参和实参个数不匹配问题
function sum(num1, num2) {
    console.log(num1 + num2);
}
sum(100, 200);             // 形参和实参个数相等，输出正确结果
sum(100, 400, 500, 700);   // 实参个数多于形参，只取到形参的个数
sum(200);                  // 实参个数少于形参，多的形参定义为undefined，结果为NaN

注意：在JavaScript中，形参的默认值是undefined。


4.1 return 语句
有的时候，我们会希望函数将值返回给调用者，此时通过使用 return 语句就可以实现。
return 语句的语法格式如下：
// 声明函数
function 函数名（）{
    ...
    return  需要返回的值；
}
// 调用函数
函数名();    // 此时调用函数就可以得到函数体内return 后面的值
在使用 return 语句时，函数会停止执行，并返回指定的值
如果函数没有 return ，返回的值是 undefined

return 语句之后的代码不被执行。

return 只能返回一个值。如果用逗号隔开多个值，以最后一个为准。
function add(num1，num2){
    //函数体
    return num1，num2;
}
var resNum = add(21,6); // 调用函数，传入两个实参，并通过 resNum 接收函数返回值
alert(resNum);          // 6


当我们不确定有多少个参数传递的时候，可以用 arguments 来获取。在 JavaScript 中，arguments 实际上
它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的
所有实参。
arguments展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点：
具有 length 属性
按索引方式储存数据
不具有数组的 push , pop 等方法

命名函数
调用函数的代码既可以放到声明函数的前面，也可以放在声明函数的后面


匿名函数
// 这是函数表达式写法，匿名函数后面跟分号结束
var fn = function(){...};
// 调用的方式，函数调用必须写到函数体下面
fn();

因为函数没有名字，所以也被称为匿名函数
这个fn 里面存储的是一个函数  
函数表达式方式原理跟声明变量方式是一致的
函数调用的代码必须写到函数体后面






---------------------------------------------------------------------------------------------------
对象

在 JavaScript 中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、
函数等。


在 JavaScript 中，现阶段我们可以采用三种方式创建对象（object）：
1、利用字面量创建对象 
2、利用 new Object 创建对象 
3、利用构造函数创建对象 

----------------
对象字面量：就是花括号 { } 里面包含了表达这个具体事物（对象）的属性和方法。
{ } 里面采取键值对的形式表示 
键：相当于属性名
值：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）
var star = {
    name : 'pink',
    age : 18,
    sex : '男',
    sayHi : function(){
        alert('大家好啊~');
    }
};
对象的调用
对象里面的属性调用 : 对象.属性名 ，这个小点 . 就理解为“ 的 ”  
对象里面属性的另一种调用方式 : 对象[‘属性名’]，注意方括号里面的属性必须加引号，我们后面会用      
对象里面的方法调用：对象.方法名() ，注意这个方法名字后面一定加括号 
console.log(star.name)     // 调用名字属性
console.log(star['name'])  // 调用名字属性
star.sayHi();              // 调用 sayHi 方法,注意，一定不要忘记带后面的括号



---------------
利用new Object创建对象
var andy = new Obect();
andy.name = 'pink';
andy.age = 18;
andy.sex = '男';
andy.sayHi = function(){
    alert('大家好啊~');
}

Object() ：第一个字母大写   
new Object() ：需要 new 关键字
使用的格式：对象.属性 =  值

对象中未赋值的属性的值为undefined



----------------
利用构造函数创建对象

构造函数 ：是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 运算符一起
使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。
在 js 中，使用构造函数要时要注意以下两点：
构造函数用于创建某一类对象，其首字母要大写
构造函数要和 new 一起使用才有意义

function Person(name, age, sex) {
     this.name = name;
     this.age = age;
     this.sex = sex;
     this.sayHi = function() {
      alert('我的名字叫：' + this.name + '，年龄：' + this.age + '，性别：' + this.sex);
    }
}
var bigbai = new Person('大白', 100, '男');
var smallbai = new Person('小白', 21, '男');
console.log(bigbai.name);
console.log(smallbai.name);

注意
1.   构造函数约定首字母大写。
2.   函数内的属性和方法前面需要添加 this ，表示当前对象的属性和方法。
3.   构造函数中不需要 return 返回结果。
4.   当我们创建对象的时候，必须用 new 来调用构造函数。


new 在执行时会做四件事情：
1. 在内存中创建一个新的空对象。
2. 让 this 指向这个新的对象。
3. 执行构造函数里面的代码，给这个新对象添加属性和方法。
4. 返回这个新对象（所以构造函数里面不需要return）。


遍历对象属性
for...in 语句用于对数组或者对象的属性进行循环操作。
其语法如下：
for (变量 in 对象名字) {
    // 在此执行代码
}
语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。
for (var k in obj) {
    console.log(k);      // 这里的 k 是属性名
    console.log(obj[k]); // 这里的 obj[k] 是属性值
}






-----------------------------------------------------------------------------------------
作用域

全局作用域。（全局变量）
局部作用域。（局部变量）


----------------
全局作用域

整个script标签或者一个单独的js文件。



----------------
局部作用域(函数作用域)

在函数内部起作用。

函数的形参也是局部变量

注意：
如果在函数内部没有声明(var)，直接赋值的变量也属于全局变量。

function fn(){
    num2=20;
    var num1=2;
}
console.log(num2)




全局变量只有关闭浏览器，才会销毁，比较占内存
局部变量函数内部使用，当该函数被执行时，会分配内存，执行完之后，会销毁，不占内存。






-----------------------------------------------------------------------------------------
js预解析

js代码是通过浏览器的解析器来执行的。js解析器在运行js代码的时候分为两步，预解析和代码执行。

预解析  js引擎(解释器) 会把js里面所有的var 还有function 提升到当前作用域的最前面

代码执行， 按照代码书写的顺序从上往下执行


预解析分为变量预解析(变量提升)和函数预解析(函数提升)

变量预解析就是把所有的变量声明，提升到当前的作用域最前面，不提升赋值操作。

函数预解析是把所有函数声明，提升到当前作用域最前面，不调用函数。




------------------------------------------------------------------------------------------
js内置对象


------------------------
Math对象

Math 对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算（求绝对值，取整、最大值
等）可以使用 Math 中的成员。
Math.PI  // 圆周率
Math.floor()   // 向下取整
Math.ceil()            // 向上取整
Math.round()           // 四舍五入版 就近取整   注意 -3.5   结果是  -3 
Math.abs()  // 绝对值
Math.max()/Math.min()  // 求最大和最小值 

注意：上面的方法必须带括号


随机数方法 random()
random() 方法可以随机返回一个小数，其取值范围是 [0，1)，左闭右开 0 <= x < 1


得到一个两数之间的随机整数，包括两个数在内
function getRandom(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min; 
}




------------------------
Date对象

Date 对象和 Math 对象不一样，他是一个构造函数，所以我们需要实例化后才能使用
Date 实例用来处理日期和时间



Date()方法的使用

获取当前时间必须实例化。
var now = new Date();
console.log(now);
2. Date() 构造函数的参数
如果括号里面有时间，就返回参数里面的时间。例如日期格式字符串为‘2019-5-1’，可以写成new Date('2019-5-1')  或者 new Date('2019/5/1')
如果Date()不写参数，就返回当前时间
如果Date()里面写参数，就返回括号里面输入的时间 


日期格式化

getFullYear()	获取当年 	                dobj.getFullYear()
getMonth()	    获取当月（0-11）	        dobj.getMonth()
getDate()	    获取当天日期 	            dobj.getDate()
getDay()	    获取星期几（周日0到周六6)	 dobj.getDay()
getHours()	    获取当前小时   	            dobj.getHours()
getMinutes()	获取当前分钟   	            dobj.getMinutes()
getSeconds()	获取当前秒 	                dobj.getSeconds()




获取日期的总的毫秒形式
// 实例化Date对象
var now = new Date();
// 1. 用于获取对象的原始值
console.log(date.valueOf())
console.log(date.getTime())
// 2. 简单写可以这么做
var now = + new Date();
// 3. HTML5中提供的方法，有兼容性问题
var now = Date.now();
Date 对象是基于1970年1月1日（世界标准时间）起的毫秒数
我们经常利用总的毫秒数来计算时间，因为它更精确


// 获得Date总的毫秒数(时间戳)  不是当前时间的毫秒数 而是距离1970年1月1号过了多少毫秒数
// 1. 通过 valueOf()  getTime()
var date = new Date();
console.log(date.valueOf()); // 就是 我们现在时间 距离1970.1.1 总的毫秒数
console.log(date.getTime());
// 2. 简单的写法 (最常用的写法)。 new前面加一个加号
var date1 = +new Date(); // +new Date()  返回的就是总的毫秒数
console.log(date1);
// 3. H5 新增的 获得总的毫秒数
console.log(Date.now());






---------------------------
数组对象


创建数组对象的两种方式：

1、字面量方式
2、new Array()


检测是否为数组

instanceof 运算符，可以判断一个对象是否属于某种类型
Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法  
var arr = [1, 23];
var obj = {};
console.log(arr instanceof Array); // true
console.log(obj instanceof Array); // false
console.log(Array.isArray(arr));   // true
console.log(Array.isArray(obj));   // false


添加删除数组元素的方法
push()       末尾添加一个或多个元素，注意修改原数组，返回新的长度。
pop()        删除数组最后一个元素，把数组长度减1，无参数，修改原数组，返回它删除的元素的值。
unshift()    向数组的开头添加一个或更多元素，注意修改原数组。返回新的长度
shift()      删除数组的第一个元素，数组长度减1，无参数，修改原数组，返回第一个元素的值。



数组排序
reverse()     颠倒数组中元素的顺序，无参数。 会改变原来的数组，返回新数组。
sort()        对数组的元素进行排序， 会改变原来的数组，返回新数组。





数组索引方法
indexOf()    在数组中查找给定元素的第一个索引。 如果存在则返回索引号，不存在返回-1
lastindexOf()   在数组中的最后一个索引。 如果存在则返回索引号，不存在返回-1


数组转换为字符串
toString()    把数组转换为字符串，逗号分隔每一项。  返回字符串
join("分隔符")   把数组中的元素转换为一个字符串，以指定的分隔符分隔。返回一个字符串。




concat()      连接两个或多个数组，不影响原数组。返回一个新的数组。
slice()       数组截取slice(begin,end)   返回被截取项目的新数组。
splice()      数组删除splice(第几个开始，删除个数)   返回被删除项目的新数组。注意，这个会影响原数组。







------------------------
字符串对象


6.1 基本包装类型

为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number和 Boolean。
基本包装类型就是把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。
// 下面代码有什么问题？
var str = 'andy';
console.log(str.length);

按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为 js 会把
基本数据类型包装为复杂数据类型，其执行过程如下 ：

// 1. 生成临时变量，把简单类型包装为复杂数据类型
var temp = new String('andy');
// 2. 赋值给我们声明的字符变量
str = temp;
// 3. 销毁临时变量
temp = null;




6.2 字符串的不可变

指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。
var str = 'abc';
str = 'hello';
// 当重新给 str 赋值的时候，常量'abc'不会被修改，依然在内存中
// 重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变
// 由于字符串的不可变，在大量拼接字符串的时候会有效率问题
var str = '';
for (var i = 0; i < 100000; i++) {
    str += i;
}
console.log(str); // 这个结果需要花费大量时间来显示，因为需要不断的开辟新的空间



字符串所有的方法，都不会修改字符串本身(字符串是不可变的)，操作完成会返回一个新的字符串。
indexOf('要查找的字符',开始的位置)    返回指定字符在原字符串中的位置。 不存在返回-1 。 开始的位置是index索引号。
lastindexOf()                 从后往前找，只找第一个匹配的




根据位置返回字符
charAt(index)      返回指定位置处的字符(index是字符串的索引号)    例如：str.charAt(0)
charCodeAt(index)   获取指定位置处的字符的ascii码值。       例如：str.charCodeAt(0)
str[index]          获取指定位置处的字符             和charAt等效。


concat(str1,str2,str3......)   连接多个字符串，等效于+，+更常用
substr(start,length)           从start位置开始(索引位置)，length取得个数。
slice(start,end)               从start位置开始，截取到end位置。end取不到。start，end是索引号
substring(start,end)           从start位置开始，截取到end位置。end取不到。基本和slice相同，但是不接受负值。


replace()      方法用于在字符串中用一些字符替换另一些字符
replace(被替换的字符串， 要替换为的字符串)


split()
split()方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组

var str = 'a,b,c,d';
console.log(str.split(','));   // 返回的是一个数组 [a, b, c, d]







----------------------------------------------------------------------------------------------------
JavaScript 简单类型与复杂类型


简单类型又叫做基本数据类型或者值类型，复杂类型又叫做引用类型。
1、值类型：简单数据类型/基本数据类型，在存储时变量中存储的是值本身，因此叫做值类型
string ，number，boolean，undefined，null
2、引用类型：复杂数据类型，在存储时变量中存储的仅仅是地址（引用），因此叫做引用数据类型
 通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等



简单类型传参
函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈
空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。

function fn(a) {
    a++;
    console.log(a); 
}
var x = 10;
fn(x);
console.log(x)；



复杂类型传参
函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地
址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。

function Person(name) {
    this.name = name;
}
function f1(x) { // x = p
    console.log(x.name); // 2. 这个输出什么 ?    
    x.name = "张学友";
    console.log(x.name); // 3. 这个输出什么 ?    
}
var p = new Person("刘德华");
console.log(p.name);    // 1. 这个输出什么 ?   
f1(p);
console.log(p.name);    // 4. 这个输出什么 ?  



















----------------------------------------------------------------------------------------------------
web apis 

js独有的。

web api是浏览器提供的一套操作浏览器功能和页面元素的api(dom和bom)

浏览器提供的接口，用于操作浏览器的。



===================DOM===================
什么是 DOM
文档对象模型（Document Object Model，简称 DOM），是 W3C 组织推荐的处理可扩展标记语言（HTML
或者XML）的标准编程接口。
W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。


DOM树

文档：一个页面就是一个文档，DOM 中使用 document 表示
元素：页面中的所有标签都是元素，DOM 中使用 element 表示
节点：网页中的所有内容都是节点（标签、属性、文本、注释等），DOM 中使用 node 表示
DOM 把以上内容都看做是对象



DOM在我们实际开发中主要用来操作元素。
我们如何来获取页面中的元素呢?
获取页面中的元素可以使用以下几种方式:
根据 ID 获取
根据标签名获取
通过 HTML5 新增的方法获取
特殊元素获取


2.2 根据 ID 获取
使用 getElementById() 方法可以获取带有 ID 的元素对象。
document.getElementById('id');

使用 console.dir() 可以打印我们获取的元素对象，更好的查看对象里面的属性和方法。


根据标签名获取
使用 getElementsByTagName() 方法可以返回带有指定标签名的对象的集合。
 document.getElementsByTagName('标签名');

注意： 
1. 因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历。
2. 得到元素对象是动态的


2.4 通过 HTML5 新增的方法获取

1. document.getElementsByClassName(‘类名’)；// 根据类名返回元素对象集合
2. document.querySelector('选择器');        // 根据指定选择器返回第一个元素对象
3. document.querySelectorAll('选择器');     // 根据指定选择器返回

注意： 
querySelector 和 querySelectorAll里面的选择器需要加符号,比如:document.querySelector('#nav');



获取特殊元素（body，html）
获取body元素
1. doucumnet.body  // 返回body元素对象
获取html元素
1. document.documentElement  // 返回html元素对象



===========================
事件基础
JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。
简单理解： 触发--- 响应机制。
网页中的每个元素都可以产生某些可以触发 JavaScript 的事件，例如，我们可以在用户点击某按钮时产生一个 
事件，然后去执行某些操作。


事件三要素
1. 事件源 （谁）
2. 事件类型 （什么事件）
3. 事件处理程序 （做啥）



实例：页面中有一个按钮，当鼠标点击按钮的时候，弹出“你好”警示框。
var btn = document.getElementById('btn');
btn.onclick = function() {
  alert('你好吗');  
};



执行事件的步骤：
1. 获取事件源
2. 注册事件（绑定事件）
3. 添加事件处理程序（采取函数赋值形式）


常见的鼠标事件
onclick	单击鼠标左键时发生，如果右键也按下则不会发生。当用户的焦点在按钮上并按了 Enter 键时，同样会触发这个事件
onmousedown	鼠标按钮被按下时发生
onmouseout	鼠标离开发生
onmouseover	鼠标经过时发生
onmouseup	鼠标按键被松开时发生
onmousemove	鼠标在某个元素上时持续发生
onfocus     获得鼠标焦点触发
onblur      失去鼠标焦点触发






操作元素
JavaScript 的 DOM 操作可以改变网页内容、结构和样式，我们可以利用 DOM 操作元素来改变元素里面的内
容 、属性等。注意以下都是属性

改变元素内容。(这两个属性是可读写的，既可获取也可修改)
element.innerText
从起始位置到终止位置的内容, 但它去除 html 标签， 同时空格和换行也会去掉
element.innerHTML
起始位置到终止位置的全部内容，包括 html 标签，同时保留空格和换行



常用元素的属性操作
1. innerText、innerHTML 改变元素内容
2. src、href
3. id、alt、title


表单元素的属性操作
type、value、checked、selected、disabled





















